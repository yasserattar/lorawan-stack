// Code generated by protoc-gen-go-json. DO NOT EDIT.
// versions:
// - protoc-gen-go-json vmaster
// - protoc             v3.9.1
// source: lorawan-stack/api/end_device.proto

package ttnpb

import (
	gogo "github.com/TheThingsIndustries/protoc-gen-go-json/gogo"
	jsonplugin "github.com/TheThingsIndustries/protoc-gen-go-json/jsonplugin"
	types "github.com/gogo/protobuf/types"
	types1 "go.thethings.network/lorawan-stack/v3/pkg/types"
)

// MarshalProtoJSON marshals the BoolValue message to JSON.
func (x *BoolValue) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteBool(x.Value)
	return
}

// UnmarshalProtoJSON unmarshals the BoolValue message from JSON.
func (x *BoolValue) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	x.Value = s.ReadBool()
	return
}

// MarshalProtoJSON marshals the MACParameters message to JSON.
func (x *MACParameters) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.MaxEirp != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("max_eirp")
		s.WriteFloat32(x.MaxEirp)
	}
	if x.AdrDataRateIndex != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("adr_data_rate_index")
		s.WriteEnum(int32(x.AdrDataRateIndex), DataRateIndex_name)
	}
	if x.AdrTxPowerIndex != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("adr_tx_power_index")
		s.WriteUint32(x.AdrTxPowerIndex)
	}
	if x.AdrNbTrans != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("adr_nb_trans")
		s.WriteUint32(x.AdrNbTrans)
	}
	if x.AdrAckLimit != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("adr_ack_limit")
		s.WriteUint32(x.AdrAckLimit)
	}
	if x.AdrAckDelay != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("adr_ack_delay")
		s.WriteUint32(x.AdrAckDelay)
	}
	if x.Rx1Delay != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("rx1_delay")
		s.WriteEnum(int32(x.Rx1Delay), RxDelay_name)
	}
	if x.Rx1DataRateOffset != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("rx1_data_rate_offset")
		s.WriteEnum(int32(x.Rx1DataRateOffset), DataRateOffset_name)
	}
	if x.Rx2DataRateIndex != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("rx2_data_rate_index")
		s.WriteEnum(int32(x.Rx2DataRateIndex), DataRateIndex_name)
	}
	if x.Rx2Frequency != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("rx2_frequency")
		s.WriteUint64(x.Rx2Frequency)
	}
	if x.MaxDutyCycle != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("max_duty_cycle")
		s.WriteEnum(int32(x.MaxDutyCycle), AggregatedDutyCycle_name)
	}
	if x.RejoinTimePeriodicity != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("rejoin_time_periodicity")
		s.WriteEnum(int32(x.RejoinTimePeriodicity), RejoinTimeExponent_name)
	}
	if x.RejoinCountPeriodicity != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("rejoin_count_periodicity")
		s.WriteEnum(int32(x.RejoinCountPeriodicity), RejoinCountExponent_name)
	}
	if x.PingSlotFrequency != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("ping_slot_frequency")
		s.WriteUint64(x.PingSlotFrequency)
	}
	if x.PingSlotDataRateIndex != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("ping_slot_data_rate_index")
		s.WriteEnum(int32(x.PingSlotDataRateIndex), DataRateIndex_name)
	}
	if x.BeaconFrequency != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("beacon_frequency")
		s.WriteUint64(x.BeaconFrequency)
	}
	if len(x.Channels) > 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("channels")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.Channels {
			s.WriteMoreIf(&wroteElement)
			// NOTE: MACParameters_Channel does not seem to implement MarshalProtoJSON.
			gogo.MarshalMessage(s, element)
		}
		s.WriteArrayEnd()
	}
	if x.UplinkDwellTime != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("uplink_dwell_time")
		x.UplinkDwellTime.MarshalProtoJSON(s.WithField("uplink_dwell_time"))
	}
	if x.DownlinkDwellTime != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("downlink_dwell_time")
		x.DownlinkDwellTime.MarshalProtoJSON(s.WithField("downlink_dwell_time"))
	}
	if x.AdrAckLimitExponent != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("adr_ack_limit_exponent")
		x.AdrAckLimitExponent.MarshalProtoJSON(s.WithField("adr_ack_limit_exponent"))
	}
	if x.AdrAckDelayExponent != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("adr_ack_delay_exponent")
		x.AdrAckDelayExponent.MarshalProtoJSON(s.WithField("adr_ack_delay_exponent"))
	}
	if x.PingSlotDataRateIndexValue != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("ping_slot_data_rate_index_value")
		x.PingSlotDataRateIndexValue.MarshalProtoJSON(s.WithField("ping_slot_data_rate_index_value"))
	}
	s.WriteObjectEnd()
}

// UnmarshalProtoJSON unmarshals the MACParameters message from JSON.
func (x *MACParameters) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "max_eirp", "maxEirp":
			x.MaxEirp = s.ReadFloat32()
		case "adr_data_rate_index", "adrDataRateIndex":
			x.AdrDataRateIndex = DataRateIndex(s.ReadEnum(DataRateIndex_value))
		case "adr_tx_power_index", "adrTxPowerIndex":
			x.AdrTxPowerIndex = s.ReadUint32()
		case "adr_nb_trans", "adrNbTrans":
			x.AdrNbTrans = s.ReadUint32()
		case "adr_ack_limit", "adrAckLimit":
			x.AdrAckLimit = s.ReadUint32()
		case "adr_ack_delay", "adrAckDelay":
			x.AdrAckDelay = s.ReadUint32()
		case "rx1_delay", "rx1Delay":
			x.Rx1Delay = RxDelay(s.ReadEnum(RxDelay_value))
		case "rx1_data_rate_offset", "rx1DataRateOffset":
			x.Rx1DataRateOffset = DataRateOffset(s.ReadEnum(DataRateOffset_value))
		case "rx2_data_rate_index", "rx2DataRateIndex":
			x.Rx2DataRateIndex = DataRateIndex(s.ReadEnum(DataRateIndex_value))
		case "rx2_frequency", "rx2Frequency":
			x.Rx2Frequency = s.ReadUint64()
		case "max_duty_cycle", "maxDutyCycle":
			x.MaxDutyCycle = AggregatedDutyCycle(s.ReadEnum(AggregatedDutyCycle_value))
		case "rejoin_time_periodicity", "rejoinTimePeriodicity":
			x.RejoinTimePeriodicity = RejoinTimeExponent(s.ReadEnum(RejoinTimeExponent_value))
		case "rejoin_count_periodicity", "rejoinCountPeriodicity":
			x.RejoinCountPeriodicity = RejoinCountExponent(s.ReadEnum(RejoinCountExponent_value))
		case "ping_slot_frequency", "pingSlotFrequency":
			x.PingSlotFrequency = s.ReadUint64()
		case "ping_slot_data_rate_index", "pingSlotDataRateIndex":
			x.PingSlotDataRateIndex = DataRateIndex(s.ReadEnum(DataRateIndex_value))
		case "beacon_frequency", "beaconFrequency":
			x.BeaconFrequency = s.ReadUint64()
		case "channels":
			s.ReadArray(func() {
				// NOTE: MACParameters_Channel does not seem to implement UnmarshalProtoJSON.
				var v MACParameters_Channel
				gogo.UnmarshalMessage(s, &v)
				x.Channels = append(x.Channels, &v)
			})
		case "uplink_dwell_time", "uplinkDwellTime":
			if !s.ReadNil() {
				x.UplinkDwellTime = &BoolValue{}
				x.UplinkDwellTime.UnmarshalProtoJSON(s.WithField("uplink_dwell_time"))
			}
		case "downlink_dwell_time", "downlinkDwellTime":
			if !s.ReadNil() {
				x.DownlinkDwellTime = &BoolValue{}
				x.DownlinkDwellTime.UnmarshalProtoJSON(s.WithField("downlink_dwell_time"))
			}
		case "adr_ack_limit_exponent", "adrAckLimitExponent":
			if !s.ReadNil() {
				x.AdrAckLimitExponent = &ADRAckLimitExponentValue{}
				x.AdrAckLimitExponent.UnmarshalProtoJSON(s.WithField("adr_ack_limit_exponent"))
			}
		case "adr_ack_delay_exponent", "adrAckDelayExponent":
			if !s.ReadNil() {
				x.AdrAckDelayExponent = &ADRAckDelayExponentValue{}
				x.AdrAckDelayExponent.UnmarshalProtoJSON(s.WithField("adr_ack_delay_exponent"))
			}
		case "ping_slot_data_rate_index_value", "pingSlotDataRateIndexValue":
			if !s.ReadNil() {
				x.PingSlotDataRateIndexValue = &DataRateIndexValue{}
				x.PingSlotDataRateIndexValue.UnmarshalProtoJSON(s.WithField("ping_slot_data_rate_index_value"))
			}
		}
	})
}

// MarshalProtoJSON marshals the EndDeviceVersion message to JSON.
func (x *EndDeviceVersion) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if true { // (gogoproto.nullable) = false
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("ids")
		// NOTE: EndDeviceVersionIdentifiers does not seem to implement MarshalProtoJSON.
		gogo.MarshalMessage(s, x)
	}
	if x.LorawanVersion != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("lorawan_version")
		s.WriteEnum(int32(x.LorawanVersion), MACVersion_name)
	}
	if x.LorawanPhyVersion != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("lorawan_phy_version")
		s.WriteEnum(int32(x.LorawanPhyVersion), PHYVersion_name)
	}
	if x.FrequencyPlanId != "" {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("frequency_plan_id")
		s.WriteString(x.FrequencyPlanId)
	}
	if len(x.Photos) > 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("photos")
		s.WriteStringArray(x.Photos)
	}
	if x.SupportsClassB {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("supports_class_b")
		s.WriteBool(x.SupportsClassB)
	}
	if x.SupportsClassC {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("supports_class_c")
		s.WriteBool(x.SupportsClassC)
	}
	if x.DefaultMacSettings != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("default_mac_settings")
		x.DefaultMacSettings.MarshalProtoJSON(s.WithField("default_mac_settings"))
	}
	if x.MinFrequency != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("min_frequency")
		s.WriteUint64(x.MinFrequency)
	}
	if x.MaxFrequency != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("max_frequency")
		s.WriteUint64(x.MaxFrequency)
	}
	if x.SupportsJoin {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("supports_join")
		s.WriteBool(x.SupportsJoin)
	}
	if x.ResetsJoinNonces {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("resets_join_nonces")
		s.WriteBool(x.ResetsJoinNonces)
	}
	if true { // (gogoproto.nullable) = false
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("default_formatters")
		// NOTE: MessagePayloadFormatters does not seem to implement MarshalProtoJSON.
		gogo.MarshalMessage(s, x)
	}
	s.WriteObjectEnd()
}

// UnmarshalProtoJSON unmarshals the EndDeviceVersion message from JSON.
func (x *EndDeviceVersion) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "ids":
			// NOTE: EndDeviceVersionIdentifiers does not seem to implement UnmarshalProtoJSON.
			var v EndDeviceVersionIdentifiers
			gogo.UnmarshalMessage(s, &v)
			x.EndDeviceVersionIdentifiers = v
		case "lorawan_version", "lorawanVersion":
			x.LorawanVersion = MACVersion(s.ReadEnum(MACVersion_value))
		case "lorawan_phy_version", "lorawanPhyVersion":
			x.LorawanPhyVersion = PHYVersion(s.ReadEnum(PHYVersion_value))
		case "frequency_plan_id", "frequencyPlanId":
			x.FrequencyPlanId = s.ReadString()
		case "photos":
			x.Photos = s.ReadStringArray()
		case "supports_class_b", "supportsClassB":
			x.SupportsClassB = s.ReadBool()
		case "supports_class_c", "supportsClassC":
			x.SupportsClassC = s.ReadBool()
		case "default_mac_settings", "defaultMacSettings":
			if !s.ReadNil() {
				x.DefaultMacSettings = &MACSettings{}
				x.DefaultMacSettings.UnmarshalProtoJSON(s.WithField("default_mac_settings"))
			}
		case "min_frequency", "minFrequency":
			x.MinFrequency = s.ReadUint64()
		case "max_frequency", "maxFrequency":
			x.MaxFrequency = s.ReadUint64()
		case "supports_join", "supportsJoin":
			x.SupportsJoin = s.ReadBool()
		case "resets_join_nonces", "resetsJoinNonces":
			x.ResetsJoinNonces = s.ReadBool()
		case "default_formatters", "defaultFormatters":
			// NOTE: MessagePayloadFormatters does not seem to implement UnmarshalProtoJSON.
			var v MessagePayloadFormatters
			gogo.UnmarshalMessage(s, &v)
			x.DefaultFormatters = v
		}
	})
}

// MarshalProtoJSON marshals the MACSettings message to JSON.
func (x *MACSettings) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.ClassBTimeout != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("class_b_timeout")
		s.WriteDuration(*x.ClassBTimeout)
	}
	if x.PingSlotPeriodicity != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("ping_slot_periodicity")
		x.PingSlotPeriodicity.MarshalProtoJSON(s.WithField("ping_slot_periodicity"))
	}
	if x.PingSlotDataRateIndex != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("ping_slot_data_rate_index")
		x.PingSlotDataRateIndex.MarshalProtoJSON(s.WithField("ping_slot_data_rate_index"))
	}
	if x.PingSlotFrequency != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("ping_slot_frequency")
		x.PingSlotFrequency.MarshalProtoJSON(s.WithField("ping_slot_frequency"))
	}
	if x.BeaconFrequency != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("beacon_frequency")
		x.BeaconFrequency.MarshalProtoJSON(s.WithField("beacon_frequency"))
	}
	if x.ClassCTimeout != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("class_c_timeout")
		s.WriteDuration(*x.ClassCTimeout)
	}
	if x.Rx1Delay != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("rx1_delay")
		x.Rx1Delay.MarshalProtoJSON(s.WithField("rx1_delay"))
	}
	if x.Rx1DataRateOffset != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("rx1_data_rate_offset")
		x.Rx1DataRateOffset.MarshalProtoJSON(s.WithField("rx1_data_rate_offset"))
	}
	if x.Rx2DataRateIndex != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("rx2_data_rate_index")
		x.Rx2DataRateIndex.MarshalProtoJSON(s.WithField("rx2_data_rate_index"))
	}
	if x.Rx2Frequency != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("rx2_frequency")
		x.Rx2Frequency.MarshalProtoJSON(s.WithField("rx2_frequency"))
	}
	if len(x.FactoryPresetFrequencies) > 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("factory_preset_frequencies")
		s.WriteUint64Array(x.FactoryPresetFrequencies)
	}
	if x.MaxDutyCycle != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("max_duty_cycle")
		x.MaxDutyCycle.MarshalProtoJSON(s.WithField("max_duty_cycle"))
	}
	if x.Supports_32BitFCnt != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("supports_32_bit_f_cnt")
		x.Supports_32BitFCnt.MarshalProtoJSON(s.WithField("supports_32_bit_f_cnt"))
	}
	if x.UseAdr != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("use_adr")
		x.UseAdr.MarshalProtoJSON(s.WithField("use_adr"))
	}
	if x.AdrMargin != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("adr_margin")
		s.WriteFloat32(x.AdrMargin.Value)
	}
	if x.ResetsFCnt != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("resets_f_cnt")
		x.ResetsFCnt.MarshalProtoJSON(s.WithField("resets_f_cnt"))
	}
	if x.StatusTimePeriodicity != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("status_time_periodicity")
		s.WriteDuration(*x.StatusTimePeriodicity)
	}
	if x.StatusCountPeriodicity != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("status_count_periodicity")
		s.WriteUint32(x.StatusCountPeriodicity.Value)
	}
	if x.DesiredRx1Delay != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("desired_rx1_delay")
		x.DesiredRx1Delay.MarshalProtoJSON(s.WithField("desired_rx1_delay"))
	}
	if x.DesiredRx1DataRateOffset != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("desired_rx1_data_rate_offset")
		x.DesiredRx1DataRateOffset.MarshalProtoJSON(s.WithField("desired_rx1_data_rate_offset"))
	}
	if x.DesiredRx2DataRateIndex != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("desired_rx2_data_rate_index")
		x.DesiredRx2DataRateIndex.MarshalProtoJSON(s.WithField("desired_rx2_data_rate_index"))
	}
	if x.DesiredRx2Frequency != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("desired_rx2_frequency")
		x.DesiredRx2Frequency.MarshalProtoJSON(s.WithField("desired_rx2_frequency"))
	}
	if x.DesiredMaxDutyCycle != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("desired_max_duty_cycle")
		x.DesiredMaxDutyCycle.MarshalProtoJSON(s.WithField("desired_max_duty_cycle"))
	}
	if x.DesiredAdrAckLimitExponent != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("desired_adr_ack_limit_exponent")
		x.DesiredAdrAckLimitExponent.MarshalProtoJSON(s.WithField("desired_adr_ack_limit_exponent"))
	}
	if x.DesiredAdrAckDelayExponent != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("desired_adr_ack_delay_exponent")
		x.DesiredAdrAckDelayExponent.MarshalProtoJSON(s.WithField("desired_adr_ack_delay_exponent"))
	}
	if x.DesiredPingSlotDataRateIndex != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("desired_ping_slot_data_rate_index")
		x.DesiredPingSlotDataRateIndex.MarshalProtoJSON(s.WithField("desired_ping_slot_data_rate_index"))
	}
	if x.DesiredPingSlotFrequency != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("desired_ping_slot_frequency")
		x.DesiredPingSlotFrequency.MarshalProtoJSON(s.WithField("desired_ping_slot_frequency"))
	}
	if x.DesiredBeaconFrequency != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("desired_beacon_frequency")
		x.DesiredBeaconFrequency.MarshalProtoJSON(s.WithField("desired_beacon_frequency"))
	}
	if x.DesiredMaxEirp != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("desired_max_eirp")
		x.DesiredMaxEirp.MarshalProtoJSON(s.WithField("desired_max_eirp"))
	}
	s.WriteObjectEnd()
}

// UnmarshalProtoJSON unmarshals the MACSettings message from JSON.
func (x *MACSettings) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "class_b_timeout", "classBTimeout":
			v := s.ReadDuration()
			if s.Err() != nil {
				return
			}
			x.ClassBTimeout = v
		case "ping_slot_periodicity", "pingSlotPeriodicity":
			if !s.ReadNil() {
				x.PingSlotPeriodicity = &PingSlotPeriodValue{}
				x.PingSlotPeriodicity.UnmarshalProtoJSON(s.WithField("ping_slot_periodicity"))
			}
		case "ping_slot_data_rate_index", "pingSlotDataRateIndex":
			if !s.ReadNil() {
				x.PingSlotDataRateIndex = &DataRateIndexValue{}
				x.PingSlotDataRateIndex.UnmarshalProtoJSON(s.WithField("ping_slot_data_rate_index"))
			}
		case "ping_slot_frequency", "pingSlotFrequency":
			if !s.ReadNil() {
				x.PingSlotFrequency = &FrequencyValue{}
				x.PingSlotFrequency.UnmarshalProtoJSON(s.WithField("ping_slot_frequency"))
			}
		case "beacon_frequency", "beaconFrequency":
			if !s.ReadNil() {
				x.BeaconFrequency = &FrequencyValue{}
				x.BeaconFrequency.UnmarshalProtoJSON(s.WithField("beacon_frequency"))
			}
		case "class_c_timeout", "classCTimeout":
			v := s.ReadDuration()
			if s.Err() != nil {
				return
			}
			x.ClassCTimeout = v
		case "rx1_delay", "rx1Delay":
			if !s.ReadNil() {
				x.Rx1Delay = &RxDelayValue{}
				x.Rx1Delay.UnmarshalProtoJSON(s.WithField("rx1_delay"))
			}
		case "rx1_data_rate_offset", "rx1DataRateOffset":
			if !s.ReadNil() {
				x.Rx1DataRateOffset = &DataRateOffsetValue{}
				x.Rx1DataRateOffset.UnmarshalProtoJSON(s.WithField("rx1_data_rate_offset"))
			}
		case "rx2_data_rate_index", "rx2DataRateIndex":
			if !s.ReadNil() {
				x.Rx2DataRateIndex = &DataRateIndexValue{}
				x.Rx2DataRateIndex.UnmarshalProtoJSON(s.WithField("rx2_data_rate_index"))
			}
		case "rx2_frequency", "rx2Frequency":
			if !s.ReadNil() {
				x.Rx2Frequency = &FrequencyValue{}
				x.Rx2Frequency.UnmarshalProtoJSON(s.WithField("rx2_frequency"))
			}
		case "factory_preset_frequencies", "factoryPresetFrequencies":
			x.FactoryPresetFrequencies = s.ReadUint64Array()
		case "max_duty_cycle", "maxDutyCycle":
			if !s.ReadNil() {
				x.MaxDutyCycle = &AggregatedDutyCycleValue{}
				x.MaxDutyCycle.UnmarshalProtoJSON(s.WithField("max_duty_cycle"))
			}
		case "supports_32_bit_f_cnt", "supports32BitFCnt":
			if !s.ReadNil() {
				x.Supports_32BitFCnt = &BoolValue{}
				x.Supports_32BitFCnt.UnmarshalProtoJSON(s.WithField("supports_32_bit_f_cnt"))
			}
		case "use_adr", "useAdr":
			if !s.ReadNil() {
				x.UseAdr = &BoolValue{}
				x.UseAdr.UnmarshalProtoJSON(s.WithField("use_adr"))
			}
		case "adr_margin", "adrMargin":
			if !s.ReadNil() {
				v := s.ReadFloat32()
				if s.Err() != nil {
					return
				}
				x.AdrMargin = &types.FloatValue{Value: v}
			}
		case "resets_f_cnt", "resetsFCnt":
			if !s.ReadNil() {
				x.ResetsFCnt = &BoolValue{}
				x.ResetsFCnt.UnmarshalProtoJSON(s.WithField("resets_f_cnt"))
			}
		case "status_time_periodicity", "statusTimePeriodicity":
			v := s.ReadDuration()
			if s.Err() != nil {
				return
			}
			x.StatusTimePeriodicity = v
		case "status_count_periodicity", "statusCountPeriodicity":
			if !s.ReadNil() {
				v := s.ReadUint32()
				if s.Err() != nil {
					return
				}
				x.StatusCountPeriodicity = &types.UInt32Value{Value: v}
			}
		case "desired_rx1_delay", "desiredRx1Delay":
			if !s.ReadNil() {
				x.DesiredRx1Delay = &RxDelayValue{}
				x.DesiredRx1Delay.UnmarshalProtoJSON(s.WithField("desired_rx1_delay"))
			}
		case "desired_rx1_data_rate_offset", "desiredRx1DataRateOffset":
			if !s.ReadNil() {
				x.DesiredRx1DataRateOffset = &DataRateOffsetValue{}
				x.DesiredRx1DataRateOffset.UnmarshalProtoJSON(s.WithField("desired_rx1_data_rate_offset"))
			}
		case "desired_rx2_data_rate_index", "desiredRx2DataRateIndex":
			if !s.ReadNil() {
				x.DesiredRx2DataRateIndex = &DataRateIndexValue{}
				x.DesiredRx2DataRateIndex.UnmarshalProtoJSON(s.WithField("desired_rx2_data_rate_index"))
			}
		case "desired_rx2_frequency", "desiredRx2Frequency":
			if !s.ReadNil() {
				x.DesiredRx2Frequency = &FrequencyValue{}
				x.DesiredRx2Frequency.UnmarshalProtoJSON(s.WithField("desired_rx2_frequency"))
			}
		case "desired_max_duty_cycle", "desiredMaxDutyCycle":
			if !s.ReadNil() {
				x.DesiredMaxDutyCycle = &AggregatedDutyCycleValue{}
				x.DesiredMaxDutyCycle.UnmarshalProtoJSON(s.WithField("desired_max_duty_cycle"))
			}
		case "desired_adr_ack_limit_exponent", "desiredAdrAckLimitExponent":
			if !s.ReadNil() {
				x.DesiredAdrAckLimitExponent = &ADRAckLimitExponentValue{}
				x.DesiredAdrAckLimitExponent.UnmarshalProtoJSON(s.WithField("desired_adr_ack_limit_exponent"))
			}
		case "desired_adr_ack_delay_exponent", "desiredAdrAckDelayExponent":
			if !s.ReadNil() {
				x.DesiredAdrAckDelayExponent = &ADRAckDelayExponentValue{}
				x.DesiredAdrAckDelayExponent.UnmarshalProtoJSON(s.WithField("desired_adr_ack_delay_exponent"))
			}
		case "desired_ping_slot_data_rate_index", "desiredPingSlotDataRateIndex":
			if !s.ReadNil() {
				x.DesiredPingSlotDataRateIndex = &DataRateIndexValue{}
				x.DesiredPingSlotDataRateIndex.UnmarshalProtoJSON(s.WithField("desired_ping_slot_data_rate_index"))
			}
		case "desired_ping_slot_frequency", "desiredPingSlotFrequency":
			if !s.ReadNil() {
				x.DesiredPingSlotFrequency = &FrequencyValue{}
				x.DesiredPingSlotFrequency.UnmarshalProtoJSON(s.WithField("desired_ping_slot_frequency"))
			}
		case "desired_beacon_frequency", "desiredBeaconFrequency":
			if !s.ReadNil() {
				x.DesiredBeaconFrequency = &FrequencyValue{}
				x.DesiredBeaconFrequency.UnmarshalProtoJSON(s.WithField("desired_beacon_frequency"))
			}
		case "desired_max_eirp", "desiredMaxEirp":
			if !s.ReadNil() {
				x.DesiredMaxEirp = &DeviceEIRPValue{}
				x.DesiredMaxEirp.UnmarshalProtoJSON(s.WithField("desired_max_eirp"))
			}
		}
	})
}

// MarshalProtoJSON marshals the MACState message to JSON.
func (x *MACState) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if true { // (gogoproto.nullable) = false
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("current_parameters")
		x.CurrentParameters.MarshalProtoJSON(s.WithField("current_parameters"))
	}
	if true { // (gogoproto.nullable) = false
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("desired_parameters")
		x.DesiredParameters.MarshalProtoJSON(s.WithField("desired_parameters"))
	}
	if x.DeviceClass != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("device_class")
		s.WriteEnum(int32(x.DeviceClass), Class_name)
	}
	if x.LorawanVersion != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("lorawan_version")
		s.WriteEnum(int32(x.LorawanVersion), MACVersion_name)
	}
	if x.LastConfirmedDownlinkAt != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("last_confirmed_downlink_at")
		s.WriteTime(*x.LastConfirmedDownlinkAt)
	}
	if x.LastDevStatusFCntUp != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("last_dev_status_f_cnt_up")
		s.WriteUint32(x.LastDevStatusFCntUp)
	}
	if x.PingSlotPeriodicity != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("ping_slot_periodicity")
		x.PingSlotPeriodicity.MarshalProtoJSON(s.WithField("ping_slot_periodicity"))
	}
	if x.PendingApplicationDownlink != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("pending_application_downlink")
		// NOTE: ApplicationDownlink does not seem to implement MarshalProtoJSON.
		gogo.MarshalMessage(s, x)
	}
	if len(x.QueuedResponses) > 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("queued_responses")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.QueuedResponses {
			s.WriteMoreIf(&wroteElement)
			// NOTE: MACCommand does not seem to implement MarshalProtoJSON.
			gogo.MarshalMessage(s, element)
		}
		s.WriteArrayEnd()
	}
	if len(x.PendingRequests) > 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("pending_requests")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.PendingRequests {
			s.WriteMoreIf(&wroteElement)
			// NOTE: MACCommand does not seem to implement MarshalProtoJSON.
			gogo.MarshalMessage(s, element)
		}
		s.WriteArrayEnd()
	}
	if x.QueuedJoinAccept != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("queued_join_accept")
		// NOTE: MACState_JoinAccept does not seem to implement MarshalProtoJSON.
		gogo.MarshalMessage(s, x)
	}
	if x.PendingJoinRequest != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("pending_join_request")
		// NOTE: MACState_JoinRequest does not seem to implement MarshalProtoJSON.
		gogo.MarshalMessage(s, x)
	}
	if x.RxWindowsAvailable {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("rx_windows_available")
		s.WriteBool(x.RxWindowsAvailable)
	}
	if len(x.RecentUplinks) > 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("recent_uplinks")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.RecentUplinks {
			s.WriteMoreIf(&wroteElement)
			// NOTE: UplinkMessage does not seem to implement MarshalProtoJSON.
			gogo.MarshalMessage(s, element)
		}
		s.WriteArrayEnd()
	}
	if len(x.RecentDownlinks) > 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("recent_downlinks")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.RecentDownlinks {
			s.WriteMoreIf(&wroteElement)
			// NOTE: DownlinkMessage does not seem to implement MarshalProtoJSON.
			gogo.MarshalMessage(s, element)
		}
		s.WriteArrayEnd()
	}
	if x.LastNetworkInitiatedDownlinkAt != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("last_network_initiated_downlink_at")
		s.WriteTime(*x.LastNetworkInitiatedDownlinkAt)
	}
	if len(x.RejectedAdrDataRateIndexes) > 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("rejected_adr_data_rate_indexes")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.RejectedAdrDataRateIndexes {
			s.WriteMoreIf(&wroteElement)
			s.WriteEnum(int32(element), DataRateIndex_name)
		}
		s.WriteArrayEnd()
	}
	if len(x.RejectedAdrTxPowerIndexes) > 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("rejected_adr_tx_power_indexes")
		s.WriteUint32Array(x.RejectedAdrTxPowerIndexes)
	}
	if len(x.RejectedFrequencies) > 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("rejected_frequencies")
		s.WriteUint64Array(x.RejectedFrequencies)
	}
	if x.LastDownlinkAt != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("last_downlink_at")
		s.WriteTime(*x.LastDownlinkAt)
	}
	if x.RejectedDataRateRanges != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("rejected_data_rate_ranges")
		s.WriteObjectStart()
		var wroteElement bool
		for k, v := range x.RejectedDataRateRanges {
			s.WriteMoreIf(&wroteElement)
			s.WriteObjectUint64Field(k)
			// NOTE: MACState_DataRateRanges does not seem to implement MarshalProtoJSON.
			gogo.MarshalMessage(s, v)
		}
		s.WriteObjectEnd()
	}
	if x.LastAdrChangeFCntUp != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("last_adr_change_f_cnt_up")
		s.WriteUint32(x.LastAdrChangeFCntUp)
	}
	s.WriteObjectEnd()
}

// UnmarshalProtoJSON unmarshals the MACState message from JSON.
func (x *MACState) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "current_parameters", "currentParameters":
			if !s.ReadNil() {
				x.CurrentParameters.UnmarshalProtoJSON(s.WithField("current_parameters"))
			}
		case "desired_parameters", "desiredParameters":
			if !s.ReadNil() {
				x.DesiredParameters.UnmarshalProtoJSON(s.WithField("desired_parameters"))
			}
		case "device_class", "deviceClass":
			x.DeviceClass = Class(s.ReadEnum(Class_value))
		case "lorawan_version", "lorawanVersion":
			x.LorawanVersion = MACVersion(s.ReadEnum(MACVersion_value))
		case "last_confirmed_downlink_at", "lastConfirmedDownlinkAt":
			v := s.ReadTime()
			if s.Err() != nil {
				return
			}
			x.LastConfirmedDownlinkAt = v
		case "last_dev_status_f_cnt_up", "lastDevStatusFCntUp":
			x.LastDevStatusFCntUp = s.ReadUint32()
		case "ping_slot_periodicity", "pingSlotPeriodicity":
			if !s.ReadNil() {
				x.PingSlotPeriodicity = &PingSlotPeriodValue{}
				x.PingSlotPeriodicity.UnmarshalProtoJSON(s.WithField("ping_slot_periodicity"))
			}
		case "pending_application_downlink", "pendingApplicationDownlink":
			// NOTE: ApplicationDownlink does not seem to implement UnmarshalProtoJSON.
			var v ApplicationDownlink
			gogo.UnmarshalMessage(s, &v)
			x.PendingApplicationDownlink = &v
		case "queued_responses", "queuedResponses":
			s.ReadArray(func() {
				// NOTE: MACCommand does not seem to implement UnmarshalProtoJSON.
				var v MACCommand
				gogo.UnmarshalMessage(s, &v)
				x.QueuedResponses = append(x.QueuedResponses, &v)
			})
		case "pending_requests", "pendingRequests":
			s.ReadArray(func() {
				// NOTE: MACCommand does not seem to implement UnmarshalProtoJSON.
				var v MACCommand
				gogo.UnmarshalMessage(s, &v)
				x.PendingRequests = append(x.PendingRequests, &v)
			})
		case "queued_join_accept", "queuedJoinAccept":
			// NOTE: MACState_JoinAccept does not seem to implement UnmarshalProtoJSON.
			var v MACState_JoinAccept
			gogo.UnmarshalMessage(s, &v)
			x.QueuedJoinAccept = &v
		case "pending_join_request", "pendingJoinRequest":
			// NOTE: MACState_JoinRequest does not seem to implement UnmarshalProtoJSON.
			var v MACState_JoinRequest
			gogo.UnmarshalMessage(s, &v)
			x.PendingJoinRequest = &v
		case "rx_windows_available", "rxWindowsAvailable":
			x.RxWindowsAvailable = s.ReadBool()
		case "recent_uplinks", "recentUplinks":
			s.ReadArray(func() {
				// NOTE: UplinkMessage does not seem to implement UnmarshalProtoJSON.
				var v UplinkMessage
				gogo.UnmarshalMessage(s, &v)
				x.RecentUplinks = append(x.RecentUplinks, &v)
			})
		case "recent_downlinks", "recentDownlinks":
			s.ReadArray(func() {
				// NOTE: DownlinkMessage does not seem to implement UnmarshalProtoJSON.
				var v DownlinkMessage
				gogo.UnmarshalMessage(s, &v)
				x.RecentDownlinks = append(x.RecentDownlinks, &v)
			})
		case "last_network_initiated_downlink_at", "lastNetworkInitiatedDownlinkAt":
			v := s.ReadTime()
			if s.Err() != nil {
				return
			}
			x.LastNetworkInitiatedDownlinkAt = v
		case "rejected_adr_data_rate_indexes", "rejectedAdrDataRateIndexes":
			s.ReadArray(func() {
				x.RejectedAdrDataRateIndexes = append(x.RejectedAdrDataRateIndexes, DataRateIndex(s.ReadEnum(DataRateIndex_value)))
			})
		case "rejected_adr_tx_power_indexes", "rejectedAdrTxPowerIndexes":
			x.RejectedAdrTxPowerIndexes = s.ReadUint32Array()
		case "rejected_frequencies", "rejectedFrequencies":
			x.RejectedFrequencies = s.ReadUint64Array()
		case "last_downlink_at", "lastDownlinkAt":
			v := s.ReadTime()
			if s.Err() != nil {
				return
			}
			x.LastDownlinkAt = v
		case "rejected_data_rate_ranges", "rejectedDataRateRanges":
			x.RejectedDataRateRanges = make(map[uint64]*MACState_DataRateRanges)
			s.ReadUint64Map(func(key uint64) {
				// NOTE: MACState_DataRateRanges does not seem to implement UnmarshalProtoJSON.
				var v MACState_DataRateRanges
				gogo.UnmarshalMessage(s, &v)
				x.RejectedDataRateRanges[key] = &v
			})
		case "last_adr_change_f_cnt_up", "lastAdrChangeFCntUp":
			x.LastAdrChangeFCntUp = s.ReadUint32()
		}
	})
}

// MarshalProtoJSON marshals the EndDevice message to JSON.
func (x *EndDevice) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if true { // (gogoproto.nullable) = false
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("ids")
		// NOTE: EndDeviceIdentifiers does not seem to implement MarshalProtoJSON.
		gogo.MarshalMessage(s, x)
	}
	if true { // (gogoproto.nullable) = false
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("created_at")
		s.WriteTime(x.CreatedAt)
	}
	if true { // (gogoproto.nullable) = false
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("updated_at")
		s.WriteTime(x.UpdatedAt)
	}
	if x.Name != "" {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("name")
		s.WriteString(x.Name)
	}
	if x.Description != "" {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("description")
		s.WriteString(x.Description)
	}
	if x.Attributes != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("attributes")
		s.WriteObjectStart()
		var wroteElement bool
		for k, v := range x.Attributes {
			s.WriteMoreIf(&wroteElement)
			s.WriteObjectStringField(k)
			s.WriteString(v)
		}
		s.WriteObjectEnd()
	}
	if x.VersionIds != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("version_ids")
		// NOTE: EndDeviceVersionIdentifiers does not seem to implement MarshalProtoJSON.
		gogo.MarshalMessage(s, x)
	}
	if x.ServiceProfileId != "" {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("service_profile_id")
		s.WriteString(x.ServiceProfileId)
	}
	if x.NetworkServerAddress != "" {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("network_server_address")
		s.WriteString(x.NetworkServerAddress)
	}
	if x.NetworkServerKekLabel != "" {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("network_server_kek_label")
		s.WriteString(x.NetworkServerKekLabel)
	}
	if x.ApplicationServerAddress != "" {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("application_server_address")
		s.WriteString(x.ApplicationServerAddress)
	}
	if x.ApplicationServerKekLabel != "" {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("application_server_kek_label")
		s.WriteString(x.ApplicationServerKekLabel)
	}
	if x.ApplicationServerId != "" {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("application_server_id")
		s.WriteString(x.ApplicationServerId)
	}
	if x.JoinServerAddress != "" {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("join_server_address")
		s.WriteString(x.JoinServerAddress)
	}
	if x.Locations != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("locations")
		s.WriteObjectStart()
		var wroteElement bool
		for k, v := range x.Locations {
			s.WriteMoreIf(&wroteElement)
			s.WriteObjectStringField(k)
			// NOTE: Location does not seem to implement MarshalProtoJSON.
			gogo.MarshalMessage(s, v)
		}
		s.WriteObjectEnd()
	}
	if x.Picture != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("picture")
		// NOTE: Picture does not seem to implement MarshalProtoJSON.
		gogo.MarshalMessage(s, x)
	}
	if x.SupportsClassB {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("supports_class_b")
		s.WriteBool(x.SupportsClassB)
	}
	if x.SupportsClassC {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("supports_class_c")
		s.WriteBool(x.SupportsClassC)
	}
	if x.LorawanVersion != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("lorawan_version")
		s.WriteEnum(int32(x.LorawanVersion), MACVersion_name)
	}
	if x.LorawanPhyVersion != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("lorawan_phy_version")
		s.WriteEnum(int32(x.LorawanPhyVersion), PHYVersion_name)
	}
	if x.FrequencyPlanId != "" {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("frequency_plan_id")
		s.WriteString(x.FrequencyPlanId)
	}
	if x.MinFrequency != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("min_frequency")
		s.WriteUint64(x.MinFrequency)
	}
	if x.MaxFrequency != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("max_frequency")
		s.WriteUint64(x.MaxFrequency)
	}
	if x.SupportsJoin {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("supports_join")
		s.WriteBool(x.SupportsJoin)
	}
	if x.ResetsJoinNonces {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("resets_join_nonces")
		s.WriteBool(x.ResetsJoinNonces)
	}
	if x.RootKeys != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("root_keys")
		// NOTE: RootKeys does not seem to implement MarshalProtoJSON.
		gogo.MarshalMessage(s, x)
	}
	if x.NetId != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("net_id")
		x.NetId.MarshalProtoJSON(s.WithField("net_id"))
	}
	if x.MacSettings != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("mac_settings")
		x.MacSettings.MarshalProtoJSON(s.WithField("mac_settings"))
	}
	if x.MacState != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("mac_state")
		x.MacState.MarshalProtoJSON(s.WithField("mac_state"))
	}
	if x.PendingMacState != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("pending_mac_state")
		x.PendingMacState.MarshalProtoJSON(s.WithField("pending_mac_state"))
	}
	if x.Session != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("session")
		// NOTE: Session does not seem to implement MarshalProtoJSON.
		gogo.MarshalMessage(s, x)
	}
	if x.PendingSession != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("pending_session")
		// NOTE: Session does not seem to implement MarshalProtoJSON.
		gogo.MarshalMessage(s, x)
	}
	if x.LastDevNonce != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("last_dev_nonce")
		s.WriteUint32(x.LastDevNonce)
	}
	if len(x.UsedDevNonces) > 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("used_dev_nonces")
		s.WriteUint32Array(x.UsedDevNonces)
	}
	if x.LastJoinNonce != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("last_join_nonce")
		s.WriteUint32(x.LastJoinNonce)
	}
	if x.LastRjCount_0 != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("last_rj_count_0")
		s.WriteUint32(x.LastRjCount_0)
	}
	if x.LastRjCount_1 != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("last_rj_count_1")
		s.WriteUint32(x.LastRjCount_1)
	}
	if x.LastDevStatusReceivedAt != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("last_dev_status_received_at")
		s.WriteTime(*x.LastDevStatusReceivedAt)
	}
	if x.PowerState != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("power_state")
		s.WriteEnum(int32(x.PowerState), PowerState_name)
	}
	if x.BatteryPercentage != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("battery_percentage")
		s.WriteFloat32(x.BatteryPercentage.Value)
	}
	if x.DownlinkMargin != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("downlink_margin")
		s.WriteInt32(x.DownlinkMargin)
	}
	if len(x.QueuedApplicationDownlinks) > 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("queued_application_downlinks")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.QueuedApplicationDownlinks {
			s.WriteMoreIf(&wroteElement)
			// NOTE: ApplicationDownlink does not seem to implement MarshalProtoJSON.
			gogo.MarshalMessage(s, element)
		}
		s.WriteArrayEnd()
	}
	if x.Formatters != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("formatters")
		// NOTE: MessagePayloadFormatters does not seem to implement MarshalProtoJSON.
		gogo.MarshalMessage(s, x)
	}
	if x.ProvisionerId != "" {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("provisioner_id")
		s.WriteString(x.ProvisionerId)
	}
	if x.ProvisioningData != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("provisioning_data")
		gogo.MarshalStruct(s, x.ProvisioningData)
	}
	if x.Multicast {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("multicast")
		s.WriteBool(x.Multicast)
	}
	if x.ClaimAuthenticationCode != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("claim_authentication_code")
		// NOTE: EndDeviceAuthenticationCode does not seem to implement MarshalProtoJSON.
		gogo.MarshalMessage(s, x)
	}
	if x.SkipPayloadCrypto {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("skip_payload_crypto")
		s.WriteBool(x.SkipPayloadCrypto)
	}
	if x.SkipPayloadCryptoOverride != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("skip_payload_crypto_override")
		s.WriteBool(x.SkipPayloadCryptoOverride.Value)
	}
	if x.ActivatedAt != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("activated_at")
		s.WriteTime(*x.ActivatedAt)
	}
	s.WriteObjectEnd()
}

// UnmarshalProtoJSON unmarshals the EndDevice message from JSON.
func (x *EndDevice) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "ids":
			// NOTE: EndDeviceIdentifiers does not seem to implement UnmarshalProtoJSON.
			var v EndDeviceIdentifiers
			gogo.UnmarshalMessage(s, &v)
			x.EndDeviceIdentifiers = v
		case "created_at", "createdAt":
			v := s.ReadTime()
			if s.Err() != nil {
				return
			}
			x.CreatedAt = *v
		case "updated_at", "updatedAt":
			v := s.ReadTime()
			if s.Err() != nil {
				return
			}
			x.UpdatedAt = *v
		case "name":
			x.Name = s.ReadString()
		case "description":
			x.Description = s.ReadString()
		case "attributes":
			x.Attributes = make(map[string]string)
			s.ReadStringMap(func(key string) {
				x.Attributes[key] = s.ReadString()
			})
		case "version_ids", "versionIds":
			// NOTE: EndDeviceVersionIdentifiers does not seem to implement UnmarshalProtoJSON.
			var v EndDeviceVersionIdentifiers
			gogo.UnmarshalMessage(s, &v)
			x.VersionIds = &v
		case "service_profile_id", "serviceProfileId":
			x.ServiceProfileId = s.ReadString()
		case "network_server_address", "networkServerAddress":
			x.NetworkServerAddress = s.ReadString()
		case "network_server_kek_label", "networkServerKekLabel":
			x.NetworkServerKekLabel = s.ReadString()
		case "application_server_address", "applicationServerAddress":
			x.ApplicationServerAddress = s.ReadString()
		case "application_server_kek_label", "applicationServerKekLabel":
			x.ApplicationServerKekLabel = s.ReadString()
		case "application_server_id", "applicationServerId":
			x.ApplicationServerId = s.ReadString()
		case "join_server_address", "joinServerAddress":
			x.JoinServerAddress = s.ReadString()
		case "locations":
			x.Locations = make(map[string]*Location)
			s.ReadStringMap(func(key string) {
				// NOTE: Location does not seem to implement UnmarshalProtoJSON.
				var v Location
				gogo.UnmarshalMessage(s, &v)
				x.Locations[key] = &v
			})
		case "picture":
			// NOTE: Picture does not seem to implement UnmarshalProtoJSON.
			var v Picture
			gogo.UnmarshalMessage(s, &v)
			x.Picture = &v
		case "supports_class_b", "supportsClassB":
			x.SupportsClassB = s.ReadBool()
		case "supports_class_c", "supportsClassC":
			x.SupportsClassC = s.ReadBool()
		case "lorawan_version", "lorawanVersion":
			x.LorawanVersion = MACVersion(s.ReadEnum(MACVersion_value))
		case "lorawan_phy_version", "lorawanPhyVersion":
			x.LorawanPhyVersion = PHYVersion(s.ReadEnum(PHYVersion_value))
		case "frequency_plan_id", "frequencyPlanId":
			x.FrequencyPlanId = s.ReadString()
		case "min_frequency", "minFrequency":
			x.MinFrequency = s.ReadUint64()
		case "max_frequency", "maxFrequency":
			x.MaxFrequency = s.ReadUint64()
		case "supports_join", "supportsJoin":
			x.SupportsJoin = s.ReadBool()
		case "resets_join_nonces", "resetsJoinNonces":
			x.ResetsJoinNonces = s.ReadBool()
		case "root_keys", "rootKeys":
			// NOTE: RootKeys does not seem to implement UnmarshalProtoJSON.
			var v RootKeys
			gogo.UnmarshalMessage(s, &v)
			x.RootKeys = &v
		case "net_id", "netId":
			if !s.ReadNil() {
				x.NetId = &types1.NetID{}
				x.NetId.UnmarshalProtoJSON(s.WithField("net_id"))
			}
		case "mac_settings", "macSettings":
			if !s.ReadNil() {
				x.MacSettings = &MACSettings{}
				x.MacSettings.UnmarshalProtoJSON(s.WithField("mac_settings"))
			}
		case "mac_state", "macState":
			if !s.ReadNil() {
				x.MacState = &MACState{}
				x.MacState.UnmarshalProtoJSON(s.WithField("mac_state"))
			}
		case "pending_mac_state", "pendingMacState":
			if !s.ReadNil() {
				x.PendingMacState = &MACState{}
				x.PendingMacState.UnmarshalProtoJSON(s.WithField("pending_mac_state"))
			}
		case "session":
			// NOTE: Session does not seem to implement UnmarshalProtoJSON.
			var v Session
			gogo.UnmarshalMessage(s, &v)
			x.Session = &v
		case "pending_session", "pendingSession":
			// NOTE: Session does not seem to implement UnmarshalProtoJSON.
			var v Session
			gogo.UnmarshalMessage(s, &v)
			x.PendingSession = &v
		case "last_dev_nonce", "lastDevNonce":
			x.LastDevNonce = s.ReadUint32()
		case "used_dev_nonces", "usedDevNonces":
			x.UsedDevNonces = s.ReadUint32Array()
		case "last_join_nonce", "lastJoinNonce":
			x.LastJoinNonce = s.ReadUint32()
		case "last_rj_count_0", "lastRjCount0":
			x.LastRjCount_0 = s.ReadUint32()
		case "last_rj_count_1", "lastRjCount1":
			x.LastRjCount_1 = s.ReadUint32()
		case "last_dev_status_received_at", "lastDevStatusReceivedAt":
			v := s.ReadTime()
			if s.Err() != nil {
				return
			}
			x.LastDevStatusReceivedAt = v
		case "power_state", "powerState":
			x.PowerState = PowerState(s.ReadEnum(PowerState_value))
		case "battery_percentage", "batteryPercentage":
			if !s.ReadNil() {
				v := s.ReadFloat32()
				if s.Err() != nil {
					return
				}
				x.BatteryPercentage = &types.FloatValue{Value: v}
			}
		case "downlink_margin", "downlinkMargin":
			x.DownlinkMargin = s.ReadInt32()
		case "queued_application_downlinks", "queuedApplicationDownlinks":
			s.ReadArray(func() {
				// NOTE: ApplicationDownlink does not seem to implement UnmarshalProtoJSON.
				var v ApplicationDownlink
				gogo.UnmarshalMessage(s, &v)
				x.QueuedApplicationDownlinks = append(x.QueuedApplicationDownlinks, &v)
			})
		case "formatters":
			// NOTE: MessagePayloadFormatters does not seem to implement UnmarshalProtoJSON.
			var v MessagePayloadFormatters
			gogo.UnmarshalMessage(s, &v)
			x.Formatters = &v
		case "provisioner_id", "provisionerId":
			x.ProvisionerId = s.ReadString()
		case "provisioning_data", "provisioningData":
			v := gogo.UnmarshalStruct(s)
			if s.Err() != nil {
				return
			}
			x.ProvisioningData = v
		case "multicast":
			x.Multicast = s.ReadBool()
		case "claim_authentication_code", "claimAuthenticationCode":
			// NOTE: EndDeviceAuthenticationCode does not seem to implement UnmarshalProtoJSON.
			var v EndDeviceAuthenticationCode
			gogo.UnmarshalMessage(s, &v)
			x.ClaimAuthenticationCode = &v
		case "skip_payload_crypto", "skipPayloadCrypto":
			x.SkipPayloadCrypto = s.ReadBool()
		case "skip_payload_crypto_override", "skipPayloadCryptoOverride":
			if !s.ReadNil() {
				v := s.ReadBool()
				if s.Err() != nil {
					return
				}
				x.SkipPayloadCryptoOverride = &types.BoolValue{Value: v}
			}
		case "activated_at", "activatedAt":
			v := s.ReadTime()
			if s.Err() != nil {
				return
			}
			x.ActivatedAt = v
		}
	})
}

// MarshalProtoJSON marshals the EndDevices message to JSON.
func (x *EndDevices) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if len(x.EndDevices) > 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("end_devices")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.EndDevices {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("end_devices"))
		}
		s.WriteArrayEnd()
	}
	s.WriteObjectEnd()
}

// UnmarshalProtoJSON unmarshals the EndDevices message from JSON.
func (x *EndDevices) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "end_devices", "endDevices":
			s.ReadArray(func() {
				if !s.ReadNil() {
					v := &EndDevice{}
					v.UnmarshalProtoJSON(s.WithField("end_devices"))
					x.EndDevices = append(x.EndDevices, v)
				} else {
					x.EndDevices = append(x.EndDevices, nil)
				}
			})
		}
	})
}

// MarshalProtoJSON marshals the CreateEndDeviceRequest message to JSON.
func (x *CreateEndDeviceRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if true { // (gogoproto.nullable) = false
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("end_device")
		x.EndDevice.MarshalProtoJSON(s.WithField("end_device"))
	}
	s.WriteObjectEnd()
}

// UnmarshalProtoJSON unmarshals the CreateEndDeviceRequest message from JSON.
func (x *CreateEndDeviceRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "end_device", "endDevice":
			if !s.ReadNil() {
				x.EndDevice.UnmarshalProtoJSON(s.WithField("end_device"))
			}
		}
	})
}

// MarshalProtoJSON marshals the UpdateEndDeviceRequest message to JSON.
func (x *UpdateEndDeviceRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if true { // (gogoproto.nullable) = false
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("end_device")
		x.EndDevice.MarshalProtoJSON(s.WithField("end_device"))
	}
	if x.FieldMask != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("field_mask")
		gogo.MarshalFieldMask(s, x.FieldMask)
	}
	s.WriteObjectEnd()
}

// UnmarshalProtoJSON unmarshals the UpdateEndDeviceRequest message from JSON.
func (x *UpdateEndDeviceRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "end_device", "endDevice":
			if !s.ReadNil() {
				x.EndDevice.UnmarshalProtoJSON(s.WithField("end_device"))
			}
		case "field_mask", "fieldMask":
			v := gogo.UnmarshalFieldMask(s)
			if s.Err() != nil {
				return
			}
			x.FieldMask = v
		}
	})
}

// MarshalProtoJSON marshals the SetEndDeviceRequest message to JSON.
func (x *SetEndDeviceRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if true { // (gogoproto.nullable) = false
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("end_device")
		x.EndDevice.MarshalProtoJSON(s.WithField("end_device"))
	}
	if x.FieldMask != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("field_mask")
		gogo.MarshalFieldMask(s, x.FieldMask)
	}
	s.WriteObjectEnd()
}

// UnmarshalProtoJSON unmarshals the SetEndDeviceRequest message from JSON.
func (x *SetEndDeviceRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "end_device", "endDevice":
			if !s.ReadNil() {
				x.EndDevice.UnmarshalProtoJSON(s.WithField("end_device"))
			}
		case "field_mask", "fieldMask":
			v := gogo.UnmarshalFieldMask(s)
			if s.Err() != nil {
				return
			}
			x.FieldMask = v
		}
	})
}

// MarshalProtoJSON marshals the EndDeviceTemplate message to JSON.
func (x *EndDeviceTemplate) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if true { // (gogoproto.nullable) = false
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("end_device")
		x.EndDevice.MarshalProtoJSON(s.WithField("end_device"))
	}
	if x.FieldMask != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("field_mask")
		gogo.MarshalFieldMask(s, x.FieldMask)
	}
	if x.MappingKey != "" {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("mapping_key")
		s.WriteString(x.MappingKey)
	}
	s.WriteObjectEnd()
}

// UnmarshalProtoJSON unmarshals the EndDeviceTemplate message from JSON.
func (x *EndDeviceTemplate) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "end_device", "endDevice":
			if !s.ReadNil() {
				x.EndDevice.UnmarshalProtoJSON(s.WithField("end_device"))
			}
		case "field_mask", "fieldMask":
			v := gogo.UnmarshalFieldMask(s)
			if s.Err() != nil {
				return
			}
			x.FieldMask = v
		case "mapping_key", "mappingKey":
			x.MappingKey = s.ReadString()
		}
	})
}
