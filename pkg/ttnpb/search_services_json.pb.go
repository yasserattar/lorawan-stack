// Code generated by protoc-gen-go-json. DO NOT EDIT.
// versions:
// - protoc-gen-go-json vmaster
// - protoc             v3.9.1
// source: lorawan-stack/api/search_services.proto

package ttnpb

import (
	gogo "github.com/TheThingsIndustries/protoc-gen-go-json/gogo"
	jsonplugin "github.com/TheThingsIndustries/protoc-gen-go-json/jsonplugin"
)

// MarshalProtoJSON marshals the SearchClientsRequest message to JSON.
func (x *SearchClientsRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.IdContains != "" {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("id_contains")
		s.WriteString(x.IdContains)
	}
	if x.NameContains != "" {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("name_contains")
		s.WriteString(x.NameContains)
	}
	if x.DescriptionContains != "" {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("description_contains")
		s.WriteString(x.DescriptionContains)
	}
	if x.AttributesContain != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("attributes_contain")
		s.WriteObjectStart()
		var wroteElement bool
		for k, v := range x.AttributesContain {
			s.WriteMoreIf(&wroteElement)
			s.WriteObjectStringField(k)
			s.WriteString(v)
		}
		s.WriteObjectEnd()
	}
	if len(x.State) > 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("state")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.State {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s)
		}
		s.WriteArrayEnd()
	}
	if x.FieldMask != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("field_mask")
		gogo.MarshalFieldMask(s, x.FieldMask)
	}
	if x.Order != "" {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("order")
		s.WriteString(x.Order)
	}
	if x.Limit != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("limit")
		s.WriteUint32(x.Limit)
	}
	if x.Page != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("page")
		s.WriteUint32(x.Page)
	}
	if x.Deleted {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("deleted")
		s.WriteBool(x.Deleted)
	}
	s.WriteObjectEnd()
}

// UnmarshalProtoJSON unmarshals the SearchClientsRequest message from JSON.
func (x *SearchClientsRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "id_contains", "idContains":
			x.IdContains = s.ReadString()
		case "name_contains", "nameContains":
			x.NameContains = s.ReadString()
		case "description_contains", "descriptionContains":
			x.DescriptionContains = s.ReadString()
		case "attributes_contain", "attributesContain":
			x.AttributesContain = make(map[string]string)
			s.ReadStringMap(func(key string) {
				x.AttributesContain[key] = s.ReadString()
			})
		case "state":
			s.ReadArray(func() {
				var v State
				v.UnmarshalProtoJSON(s)
				x.State = append(x.State, v)
			})
		case "field_mask", "fieldMask":
			v := gogo.UnmarshalFieldMask(s)
			if s.Err() != nil {
				return
			}
			x.FieldMask = v
		case "order":
			x.Order = s.ReadString()
		case "limit":
			x.Limit = s.ReadUint32()
		case "page":
			x.Page = s.ReadUint32()
		case "deleted":
			x.Deleted = s.ReadBool()
		}
	})
}

// MarshalProtoJSON marshals the SearchUsersRequest message to JSON.
func (x *SearchUsersRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.IdContains != "" {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("id_contains")
		s.WriteString(x.IdContains)
	}
	if x.NameContains != "" {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("name_contains")
		s.WriteString(x.NameContains)
	}
	if x.DescriptionContains != "" {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("description_contains")
		s.WriteString(x.DescriptionContains)
	}
	if x.AttributesContain != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("attributes_contain")
		s.WriteObjectStart()
		var wroteElement bool
		for k, v := range x.AttributesContain {
			s.WriteMoreIf(&wroteElement)
			s.WriteObjectStringField(k)
			s.WriteString(v)
		}
		s.WriteObjectEnd()
	}
	if len(x.State) > 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("state")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.State {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s)
		}
		s.WriteArrayEnd()
	}
	if x.FieldMask != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("field_mask")
		gogo.MarshalFieldMask(s, x.FieldMask)
	}
	if x.Order != "" {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("order")
		s.WriteString(x.Order)
	}
	if x.Limit != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("limit")
		s.WriteUint32(x.Limit)
	}
	if x.Page != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("page")
		s.WriteUint32(x.Page)
	}
	if x.Deleted {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("deleted")
		s.WriteBool(x.Deleted)
	}
	s.WriteObjectEnd()
}

// UnmarshalProtoJSON unmarshals the SearchUsersRequest message from JSON.
func (x *SearchUsersRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "id_contains", "idContains":
			x.IdContains = s.ReadString()
		case "name_contains", "nameContains":
			x.NameContains = s.ReadString()
		case "description_contains", "descriptionContains":
			x.DescriptionContains = s.ReadString()
		case "attributes_contain", "attributesContain":
			x.AttributesContain = make(map[string]string)
			s.ReadStringMap(func(key string) {
				x.AttributesContain[key] = s.ReadString()
			})
		case "state":
			s.ReadArray(func() {
				var v State
				v.UnmarshalProtoJSON(s)
				x.State = append(x.State, v)
			})
		case "field_mask", "fieldMask":
			v := gogo.UnmarshalFieldMask(s)
			if s.Err() != nil {
				return
			}
			x.FieldMask = v
		case "order":
			x.Order = s.ReadString()
		case "limit":
			x.Limit = s.ReadUint32()
		case "page":
			x.Page = s.ReadUint32()
		case "deleted":
			x.Deleted = s.ReadBool()
		}
	})
}
