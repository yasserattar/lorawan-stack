// Code generated by protoc-gen-go-json. DO NOT EDIT.
// versions:
// - protoc-gen-go-json vmaster
// - protoc             v3.9.1
// source: lorawan-stack/api/lorawan.proto

package ttnpb

import (
	gogo "github.com/TheThingsIndustries/protoc-gen-go-json/gogo"
	jsonplugin "github.com/TheThingsIndustries/protoc-gen-go-json/jsonplugin"
)

// MarshalProtoJSON marshals the MType to JSON.
func (x MType) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	s.WriteEnumString(int32(x), MType_name)
}

// UnmarshalProtoJSON unmarshals the MType from JSON.
func (x *MType) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	v := s.ReadEnum(MType_value)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read MType enum: %v", err)
		return
	}
	*x = MType(v)
}

// MarshalProtoJSON marshals the Major to JSON.
func (x Major) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	s.WriteEnumString(int32(x), Major_name)
}

// Major_customvalue contains custom string values that extend Major_value.
var Major_customvalue = map[string]int32{
	"R1": 0,
}

// UnmarshalProtoJSON unmarshals the Major from JSON.
func (x *Major) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	v := s.ReadEnum(Major_value, Major_customvalue)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read Major enum: %v", err)
		return
	}
	*x = Major(v)
}

// MarshalProtoJSON marshals the MACVersion to JSON.
func (x MACVersion) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	s.WriteEnumString(int32(x), MACVersion_name)
}

// MACVersion_customvalue contains custom string values that extend MACVersion_value.
var MACVersion_customvalue = map[string]int32{
	"UNKNOWN": 0,
	"V1_0":    1,
	"V1_0_1":  2,
	"V1_0_2":  3,
	"V1_1":    4,
	"V1_0_3":  5,
	"V1_0_4":  6,
}

// UnmarshalProtoJSON unmarshals the MACVersion from JSON.
func (x *MACVersion) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	v := s.ReadEnum(MACVersion_value, MACVersion_customvalue)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read MACVersion enum: %v", err)
		return
	}
	*x = MACVersion(v)
}

// PHYVersion_customname contains custom string values that override PHYVersion_name.
var PHYVersion_customname = map[int32]string{
	0: "unknown",
	1: "PHY_V1_0",
	2: "PHY_V1_0_1",
	3: "PHY_V1_0_2_REV_A",
	4: "PHY_V1_0_2_REV_B",
	5: "PHY_V1_1_REV_A",
	6: "PHY_V1_1_REV_B",
	7: "PHY_V1_0_3_REV_A",
}

// MarshalProtoJSON marshals the PHYVersion to JSON.
func (x PHYVersion) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	s.WriteEnumString(int32(x), PHYVersion_customname, PHYVersion_name)
}

// PHYVersion_customvalue contains custom string values that extend PHYVersion_value.
var PHYVersion_customvalue = map[string]int32{
	"UNKNOWN":          0,
	"unknown":          0,
	"PHY_V1_0":         1,
	"1.0":              1,
	"1.0.0":            1,
	"PHY_V1_0_1":       2,
	"1.0.1":            2,
	"PHY_V1_0_2_REV_A": 3,
	"1.0.2":            3,
	"1.0.2-a":          3,
	"PHY_V1_0_2_REV_B": 4,
	"1.0.2-b":          4,
	"PHY_V1_1_REV_A":   5,
	"1.1-a":            5,
	"1.1.0-a":          5,
	"PHY_V1_1_REV_B":   6,
	"1.1-b":            6,
	"1.1.0-b":          6,
	"PHY_V1_0_3_REV_A": 7,
	"1.0.3-a":          7,
}

// UnmarshalProtoJSON unmarshals the PHYVersion from JSON.
func (x *PHYVersion) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	v := s.ReadEnum(PHYVersion_value, PHYVersion_customvalue)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read PHYVersion enum: %v", err)
		return
	}
	*x = PHYVersion(v)
}

// MarshalProtoJSON marshals the DataRateIndex to JSON.
func (x DataRateIndex) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	s.WriteEnumNumber(int32(x))
}

// DataRateIndex_customvalue contains custom string values that extend DataRateIndex_value.
var DataRateIndex_customvalue = map[string]int32{
	"0":  0,
	"1":  1,
	"2":  2,
	"3":  3,
	"4":  4,
	"5":  5,
	"6":  6,
	"7":  7,
	"8":  8,
	"9":  9,
	"10": 10,
	"11": 11,
	"12": 12,
	"13": 13,
	"14": 14,
	"15": 15,
}

// UnmarshalProtoJSON unmarshals the DataRateIndex from JSON.
func (x *DataRateIndex) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	v := s.ReadEnum(DataRateIndex_value, DataRateIndex_customvalue)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read DataRateIndex enum: %v", err)
		return
	}
	*x = DataRateIndex(v)
}

// MarshalProtoJSON marshals the DataRateOffset to JSON.
func (x DataRateOffset) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	s.WriteEnumNumber(int32(x))
}

// DataRateOffset_customvalue contains custom string values that extend DataRateOffset_value.
var DataRateOffset_customvalue = map[string]int32{
	"0": 0,
	"1": 1,
	"2": 2,
	"3": 3,
	"4": 4,
	"5": 5,
	"6": 6,
	"7": 7,
}

// UnmarshalProtoJSON unmarshals the DataRateOffset from JSON.
func (x *DataRateOffset) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	v := s.ReadEnum(DataRateOffset_value, DataRateOffset_customvalue)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read DataRateOffset enum: %v", err)
		return
	}
	*x = DataRateOffset(v)
}

// MarshalProtoJSON marshals the JoinRequestType to JSON.
func (x JoinRequestType) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	s.WriteEnumString(int32(x), JoinRequestType_name)
}

// UnmarshalProtoJSON unmarshals the JoinRequestType from JSON.
func (x *JoinRequestType) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	v := s.ReadEnum(JoinRequestType_value)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read JoinRequestType enum: %v", err)
		return
	}
	*x = JoinRequestType(v)
}

// MarshalProtoJSON marshals the RejoinRequestType to JSON.
func (x RejoinRequestType) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	s.WriteEnumString(int32(x), RejoinRequestType_name)
}

// UnmarshalProtoJSON unmarshals the RejoinRequestType from JSON.
func (x *RejoinRequestType) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	v := s.ReadEnum(RejoinRequestType_value)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read RejoinRequestType enum: %v", err)
		return
	}
	*x = RejoinRequestType(v)
}

// MarshalProtoJSON marshals the CFListType to JSON.
func (x CFListType) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	s.WriteEnumString(int32(x), CFListType_name)
}

// UnmarshalProtoJSON unmarshals the CFListType from JSON.
func (x *CFListType) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	v := s.ReadEnum(CFListType_value)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read CFListType enum: %v", err)
		return
	}
	*x = CFListType(v)
}

// MarshalProtoJSON marshals the Class to JSON.
func (x Class) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	s.WriteEnumString(int32(x), Class_name)
}

// Class_customvalue contains custom string values that extend Class_value.
var Class_customvalue = map[string]int32{
	"A": 0,
	"B": 1,
	"C": 2,
}

// UnmarshalProtoJSON unmarshals the Class from JSON.
func (x *Class) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	v := s.ReadEnum(Class_value, Class_customvalue)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read Class enum: %v", err)
		return
	}
	*x = Class(v)
}

// MarshalProtoJSON marshals the TxSchedulePriority to JSON.
func (x TxSchedulePriority) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	s.WriteEnumString(int32(x), TxSchedulePriority_name)
}

// UnmarshalProtoJSON unmarshals the TxSchedulePriority from JSON.
func (x *TxSchedulePriority) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	v := s.ReadEnum(TxSchedulePriority_value)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read TxSchedulePriority enum: %v", err)
		return
	}
	*x = TxSchedulePriority(v)
}

// MarshalProtoJSON marshals the MACCommandIdentifier to JSON.
func (x MACCommandIdentifier) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	s.WriteEnumString(int32(x), MACCommandIdentifier_name)
}

// MACCommandIdentifier_customvalue contains custom string values that extend MACCommandIdentifier_value.
var MACCommandIdentifier_customvalue = map[string]int32{
	"RFU_0":              0,
	"RESET":              1,
	"LINK_CHECK":         2,
	"LINK_ADR":           3,
	"DUTY_CYCLE":         4,
	"RX_PARAM_SETUP":     5,
	"DEV_STATUS":         6,
	"NEW_CHANNEL":        7,
	"RX_TIMING_SETUP":    8,
	"TX_PARAM_SETUP":     9,
	"DL_CHANNEL":         10,
	"REKEY":              11,
	"ADR_PARAM_SETUP":    12,
	"DEVICE_TIME":        13,
	"FORCE_REJOIN":       14,
	"REJOIN_PARAM_SETUP": 15,
	"PING_SLOT_INFO":     16,
	"PING_SLOT_CHANNEL":  17,
	"BEACON_TIMING":      18,
	"BEACON_FREQ":        19,
	"DEVICE_MODE":        32,
}

// UnmarshalProtoJSON unmarshals the MACCommandIdentifier from JSON.
func (x *MACCommandIdentifier) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	v := s.ReadEnum(MACCommandIdentifier_value, MACCommandIdentifier_customvalue)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read MACCommandIdentifier enum: %v", err)
		return
	}
	*x = MACCommandIdentifier(v)
}

// MarshalProtoJSON marshals the AggregatedDutyCycle to JSON.
func (x AggregatedDutyCycle) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	s.WriteEnumString(int32(x), AggregatedDutyCycle_name)
}

// AggregatedDutyCycle_customvalue contains custom string values that extend AggregatedDutyCycle_value.
var AggregatedDutyCycle_customvalue = map[string]int32{
	"1":     0,
	"2":     1,
	"4":     2,
	"8":     3,
	"16":    4,
	"32":    5,
	"64":    6,
	"128":   7,
	"256":   8,
	"512":   9,
	"1024":  10,
	"2048":  11,
	"4096":  12,
	"8192":  13,
	"16384": 14,
	"32768": 15,
}

// UnmarshalProtoJSON unmarshals the AggregatedDutyCycle from JSON.
func (x *AggregatedDutyCycle) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	v := s.ReadEnum(AggregatedDutyCycle_value, AggregatedDutyCycle_customvalue)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read AggregatedDutyCycle enum: %v", err)
		return
	}
	*x = AggregatedDutyCycle(v)
}

// MarshalProtoJSON marshals the PingSlotPeriod to JSON.
func (x PingSlotPeriod) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	s.WriteEnumString(int32(x), PingSlotPeriod_name)
}

// PingSlotPeriod_customvalue contains custom string values that extend PingSlotPeriod_value.
var PingSlotPeriod_customvalue = map[string]int32{
	"1S":   0,
	"2S":   1,
	"4S":   2,
	"8S":   3,
	"16S":  4,
	"32S":  5,
	"64S":  6,
	"128S": 7,
}

// UnmarshalProtoJSON unmarshals the PingSlotPeriod from JSON.
func (x *PingSlotPeriod) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	v := s.ReadEnum(PingSlotPeriod_value, PingSlotPeriod_customvalue)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read PingSlotPeriod enum: %v", err)
		return
	}
	*x = PingSlotPeriod(v)
}

// MarshalProtoJSON marshals the RejoinCountExponent to JSON.
func (x RejoinCountExponent) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	s.WriteEnumString(int32(x), RejoinCountExponent_name)
}

// RejoinCountExponent_customvalue contains custom string values that extend RejoinCountExponent_value.
var RejoinCountExponent_customvalue = map[string]int32{
	"16":     0,
	"32":     1,
	"64":     2,
	"128":    3,
	"256":    4,
	"512":    5,
	"1024":   6,
	"2048":   7,
	"4096":   8,
	"8192":   9,
	"16384":  10,
	"32768":  11,
	"65536":  12,
	"131072": 13,
	"262144": 14,
	"524288": 15,
}

// UnmarshalProtoJSON unmarshals the RejoinCountExponent from JSON.
func (x *RejoinCountExponent) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	v := s.ReadEnum(RejoinCountExponent_value, RejoinCountExponent_customvalue)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read RejoinCountExponent enum: %v", err)
		return
	}
	*x = RejoinCountExponent(v)
}

// MarshalProtoJSON marshals the RejoinTimeExponent to JSON.
func (x RejoinTimeExponent) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	s.WriteEnumString(int32(x), RejoinTimeExponent_name)
}

// RejoinTimeExponent_customvalue contains custom string values that extend RejoinTimeExponent_value.
var RejoinTimeExponent_customvalue = map[string]int32{
	"0":  0,
	"1":  1,
	"2":  2,
	"3":  3,
	"4":  4,
	"5":  5,
	"6":  6,
	"7":  7,
	"8":  8,
	"9":  9,
	"10": 10,
	"11": 11,
	"12": 12,
	"13": 13,
	"14": 14,
	"15": 15,
}

// UnmarshalProtoJSON unmarshals the RejoinTimeExponent from JSON.
func (x *RejoinTimeExponent) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	v := s.ReadEnum(RejoinTimeExponent_value, RejoinTimeExponent_customvalue)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read RejoinTimeExponent enum: %v", err)
		return
	}
	*x = RejoinTimeExponent(v)
}

// MarshalProtoJSON marshals the RejoinPeriodExponent to JSON.
func (x RejoinPeriodExponent) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	s.WriteEnumString(int32(x), RejoinPeriodExponent_name)
}

// RejoinPeriodExponent_customvalue contains custom string values that extend RejoinPeriodExponent_value.
var RejoinPeriodExponent_customvalue = map[string]int32{
	"0": 0,
	"1": 1,
	"2": 2,
	"3": 3,
	"4": 4,
	"5": 5,
	"6": 6,
	"7": 7,
}

// UnmarshalProtoJSON unmarshals the RejoinPeriodExponent from JSON.
func (x *RejoinPeriodExponent) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	v := s.ReadEnum(RejoinPeriodExponent_value, RejoinPeriodExponent_customvalue)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read RejoinPeriodExponent enum: %v", err)
		return
	}
	*x = RejoinPeriodExponent(v)
}

// MarshalProtoJSON marshals the DeviceEIRP to JSON.
func (x DeviceEIRP) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	s.WriteEnumString(int32(x), DeviceEIRP_name)
}

// DeviceEIRP_customvalue contains custom string values that extend DeviceEIRP_value.
var DeviceEIRP_customvalue = map[string]int32{
	"8":  0,
	"10": 1,
	"12": 2,
	"13": 3,
	"14": 4,
	"16": 5,
	"18": 6,
	"20": 7,
	"21": 8,
	"24": 9,
	"26": 10,
	"27": 11,
	"29": 12,
	"30": 13,
	"33": 14,
	"36": 15,
}

// UnmarshalProtoJSON unmarshals the DeviceEIRP from JSON.
func (x *DeviceEIRP) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	v := s.ReadEnum(DeviceEIRP_value, DeviceEIRP_customvalue)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read DeviceEIRP enum: %v", err)
		return
	}
	*x = DeviceEIRP(v)
}

// MarshalProtoJSON marshals the ADRAckLimitExponent to JSON.
func (x ADRAckLimitExponent) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	s.WriteEnumString(int32(x), ADRAckLimitExponent_name)
}

// ADRAckLimitExponent_customvalue contains custom string values that extend ADRAckLimitExponent_value.
var ADRAckLimitExponent_customvalue = map[string]int32{
	"1":     0,
	"2":     1,
	"4":     2,
	"8":     3,
	"16":    4,
	"32":    5,
	"64":    6,
	"128":   7,
	"256":   8,
	"512":   9,
	"1024":  10,
	"2048":  11,
	"4096":  12,
	"8192":  13,
	"16384": 14,
	"32768": 15,
}

// UnmarshalProtoJSON unmarshals the ADRAckLimitExponent from JSON.
func (x *ADRAckLimitExponent) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	v := s.ReadEnum(ADRAckLimitExponent_value, ADRAckLimitExponent_customvalue)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read ADRAckLimitExponent enum: %v", err)
		return
	}
	*x = ADRAckLimitExponent(v)
}

// MarshalProtoJSON marshals the ADRAckDelayExponent to JSON.
func (x ADRAckDelayExponent) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	s.WriteEnumString(int32(x), ADRAckDelayExponent_name)
}

// ADRAckDelayExponent_customvalue contains custom string values that extend ADRAckDelayExponent_value.
var ADRAckDelayExponent_customvalue = map[string]int32{
	"1":     0,
	"2":     1,
	"4":     2,
	"8":     3,
	"16":    4,
	"32":    5,
	"64":    6,
	"128":   7,
	"256":   8,
	"512":   9,
	"1024":  10,
	"2048":  11,
	"4096":  12,
	"8192":  13,
	"16384": 14,
	"32768": 15,
}

// UnmarshalProtoJSON unmarshals the ADRAckDelayExponent from JSON.
func (x *ADRAckDelayExponent) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	v := s.ReadEnum(ADRAckDelayExponent_value, ADRAckDelayExponent_customvalue)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read ADRAckDelayExponent enum: %v", err)
		return
	}
	*x = ADRAckDelayExponent(v)
}

// MarshalProtoJSON marshals the RxDelay to JSON.
func (x RxDelay) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	s.WriteEnumNumber(int32(x))
}

// RxDelay_customvalue contains custom string values that extend RxDelay_value.
var RxDelay_customvalue = map[string]int32{
	"0":  0,
	"1":  1,
	"2":  2,
	"3":  3,
	"4":  4,
	"5":  5,
	"6":  6,
	"7":  7,
	"8":  8,
	"9":  9,
	"10": 10,
	"11": 11,
	"12": 12,
	"13": 13,
	"14": 14,
	"15": 15,
}

// UnmarshalProtoJSON unmarshals the RxDelay from JSON.
func (x *RxDelay) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	v := s.ReadEnum(RxDelay_value, RxDelay_customvalue)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read RxDelay enum: %v", err)
		return
	}
	*x = RxDelay(v)
}

// MarshalProtoJSON marshals the Minor to JSON.
func (x Minor) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	s.WriteEnumString(int32(x), Minor_name)
}

// Minor_customvalue contains custom string values that extend Minor_value.
var Minor_customvalue = map[string]int32{
	"RFU_0":  0,
	"1":      1,
	"RFU_2":  2,
	"RFU_3":  3,
	"RFU_4":  4,
	"RFU_5":  5,
	"RFU_6":  6,
	"RFU_7":  7,
	"RFU_8":  8,
	"RFU_9":  9,
	"RFU_10": 10,
	"RFU_11": 11,
	"RFU_12": 12,
	"RFU_13": 13,
	"RFU_14": 14,
	"RFU_15": 15,
}

// UnmarshalProtoJSON unmarshals the Minor from JSON.
func (x *Minor) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	v := s.ReadEnum(Minor_value, Minor_customvalue)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read Minor enum: %v", err)
		return
	}
	*x = Minor(v)
}

// MarshalProtoJSON marshals the Message message to JSON.
func (x *Message) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if true { // (gogoproto.nullable) = false
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("m_hdr")
		x.MHDR.MarshalProtoJSON(s.WithField("m_hdr"))
	}
	if len(x.Mic) > 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("mic")
		s.WriteBytes(x.Mic)
	}
	if x.Payload != nil {
		switch v := x.Payload.(type) {
		case *Message_MacPayload:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("mac_payload")
			// NOTE: MACPayload does not seem to implement MarshalProtoJSON.
			gogo.MarshalMessage(s, v.MacPayload)
		case *Message_JoinRequestPayload:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("join_request_payload")
			// NOTE: JoinRequestPayload does not seem to implement MarshalProtoJSON.
			gogo.MarshalMessage(s, v.JoinRequestPayload)
		case *Message_JoinAcceptPayload:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("join_accept_payload")
			v.JoinAcceptPayload.MarshalProtoJSON(s.WithField("join_accept_payload"))
		case *Message_RejoinRequestPayload:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("rejoin_request_payload")
			v.RejoinRequestPayload.MarshalProtoJSON(s.WithField("rejoin_request_payload"))
		}
	}
	s.WriteObjectEnd()
}

// UnmarshalProtoJSON unmarshals the Message message from JSON.
func (x *Message) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "m_hdr", "mHdr":
			if !s.ReadNil() {
				x.MHDR.UnmarshalProtoJSON(s.WithField("m_hdr"))
			}
		case "mic":
			x.Mic = s.ReadBytes()
		case "mac_payload", "macPayload":
			ov := &Message_MacPayload{}
			// NOTE: MACPayload does not seem to implement UnmarshalProtoJSON.
			var v MACPayload
			gogo.UnmarshalMessage(s, &v)
			ov.MacPayload = &v
			x.Payload = ov
		case "join_request_payload", "joinRequestPayload":
			ov := &Message_JoinRequestPayload{}
			// NOTE: JoinRequestPayload does not seem to implement UnmarshalProtoJSON.
			var v JoinRequestPayload
			gogo.UnmarshalMessage(s, &v)
			ov.JoinRequestPayload = &v
			x.Payload = ov
		case "join_accept_payload", "joinAcceptPayload":
			ov := &Message_JoinAcceptPayload{}
			if !s.ReadNil() {
				ov.JoinAcceptPayload = &JoinAcceptPayload{}
				ov.JoinAcceptPayload.UnmarshalProtoJSON(s.WithField("join_accept_payload"))
			}
			x.Payload = ov
		case "rejoin_request_payload", "rejoinRequestPayload":
			ov := &Message_RejoinRequestPayload{}
			if !s.ReadNil() {
				ov.RejoinRequestPayload = &RejoinRequestPayload{}
				ov.RejoinRequestPayload.UnmarshalProtoJSON(s.WithField("rejoin_request_payload"))
			}
			x.Payload = ov
		}
	})
}

// MarshalProtoJSON marshals the MHDR message to JSON.
func (x *MHDR) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.MType != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("m_type")
		x.MType.MarshalProtoJSON(s)
	}
	if x.Major != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("major")
		x.Major.MarshalProtoJSON(s)
	}
	s.WriteObjectEnd()
}

// UnmarshalProtoJSON unmarshals the MHDR message from JSON.
func (x *MHDR) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "m_type", "mType":
			x.MType.UnmarshalProtoJSON(s)
		case "major":
			x.Major.UnmarshalProtoJSON(s)
		}
	})
}

// MarshalProtoJSON marshals the RejoinRequestPayload message to JSON.
func (x *RejoinRequestPayload) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.RejoinType != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("rejoin_type")
		x.RejoinType.MarshalProtoJSON(s)
	}
	if len(x.NetId) > 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("net_id")
		x.NetId.MarshalProtoJSON(s.WithField("net_id"))
	}
	if len(x.JoinEui) > 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("join_eui")
		x.JoinEui.MarshalProtoJSON(s.WithField("join_eui"))
	}
	if len(x.DevEui) > 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("dev_eui")
		x.DevEui.MarshalProtoJSON(s.WithField("dev_eui"))
	}
	if x.RejoinCnt != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("rejoin_cnt")
		s.WriteUint32(x.RejoinCnt)
	}
	s.WriteObjectEnd()
}

// UnmarshalProtoJSON unmarshals the RejoinRequestPayload message from JSON.
func (x *RejoinRequestPayload) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "rejoin_type", "rejoinType":
			x.RejoinType.UnmarshalProtoJSON(s)
		case "net_id", "netId":
			x.NetId.UnmarshalProtoJSON(s.WithField("net_id"))
		case "join_eui", "joinEui":
			x.JoinEui.UnmarshalProtoJSON(s.WithField("join_eui"))
		case "dev_eui", "devEui":
			x.DevEui.UnmarshalProtoJSON(s.WithField("dev_eui"))
		case "rejoin_cnt", "rejoinCnt":
			x.RejoinCnt = s.ReadUint32()
		}
	})
}

// MarshalProtoJSON marshals the JoinAcceptPayload message to JSON.
func (x *JoinAcceptPayload) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if len(x.Encrypted) > 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("encrypted")
		s.WriteBytes(x.Encrypted)
	}
	if len(x.JoinNonce) > 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("join_nonce")
		x.JoinNonce.MarshalProtoJSON(s.WithField("join_nonce"))
	}
	if len(x.NetId) > 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("net_id")
		x.NetId.MarshalProtoJSON(s.WithField("net_id"))
	}
	if len(x.DevAddr) > 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("dev_addr")
		x.DevAddr.MarshalProtoJSON(s.WithField("dev_addr"))
	}
	if true { // (gogoproto.nullable) = false
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("dl_settings")
		x.DLSettings.MarshalProtoJSON(s.WithField("dl_settings"))
	}
	if x.RxDelay != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("rx_delay")
		x.RxDelay.MarshalProtoJSON(s)
	}
	if x.CfList != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("cf_list")
		x.CfList.MarshalProtoJSON(s.WithField("cf_list"))
	}
	s.WriteObjectEnd()
}

// UnmarshalProtoJSON unmarshals the JoinAcceptPayload message from JSON.
func (x *JoinAcceptPayload) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "encrypted":
			x.Encrypted = s.ReadBytes()
		case "join_nonce", "joinNonce":
			x.JoinNonce.UnmarshalProtoJSON(s.WithField("join_nonce"))
		case "net_id", "netId":
			x.NetId.UnmarshalProtoJSON(s.WithField("net_id"))
		case "dev_addr", "devAddr":
			x.DevAddr.UnmarshalProtoJSON(s.WithField("dev_addr"))
		case "dl_settings", "dlSettings":
			if !s.ReadNil() {
				x.DLSettings.UnmarshalProtoJSON(s.WithField("dl_settings"))
			}
		case "rx_delay", "rxDelay":
			x.RxDelay.UnmarshalProtoJSON(s)
		case "cf_list", "cfList":
			if !s.ReadNil() {
				x.CfList = &CFList{}
				x.CfList.UnmarshalProtoJSON(s.WithField("cf_list"))
			}
		}
	})
}

// MarshalProtoJSON marshals the DLSettings message to JSON.
func (x *DLSettings) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Rx1DrOffset != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("rx1_dr_offset")
		x.Rx1DrOffset.MarshalProtoJSON(s)
	}
	if x.Rx2Dr != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("rx2_dr")
		x.Rx2Dr.MarshalProtoJSON(s)
	}
	if x.OptNeg {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("opt_neg")
		s.WriteBool(x.OptNeg)
	}
	s.WriteObjectEnd()
}

// UnmarshalProtoJSON unmarshals the DLSettings message from JSON.
func (x *DLSettings) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "rx1_dr_offset", "rx1DrOffset":
			x.Rx1DrOffset.UnmarshalProtoJSON(s)
		case "rx2_dr", "rx2Dr":
			x.Rx2Dr.UnmarshalProtoJSON(s)
		case "opt_neg", "optNeg":
			x.OptNeg = s.ReadBool()
		}
	})
}

// MarshalProtoJSON marshals the CFList message to JSON.
func (x *CFList) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Type != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("type")
		x.Type.MarshalProtoJSON(s)
	}
	if len(x.Freq) > 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("freq")
		s.WriteUint32Array(x.Freq)
	}
	if len(x.ChMasks) > 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("ch_masks")
		s.WriteBoolArray(x.ChMasks)
	}
	s.WriteObjectEnd()
}

// UnmarshalProtoJSON unmarshals the CFList message from JSON.
func (x *CFList) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "type":
			x.Type.UnmarshalProtoJSON(s)
		case "freq":
			x.Freq = s.ReadUint32Array()
		case "ch_masks", "chMasks":
			x.ChMasks = s.ReadBoolArray()
		}
	})
}

// MarshalProtoJSON marshals the TxSettings message to JSON.
func (x *TxSettings) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if true { // (gogoproto.nullable) = false
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("data_rate")
		// NOTE: DataRate does not seem to implement MarshalProtoJSON.
		gogo.MarshalMessage(s, &x.DataRate)
	}
	if x.DataRateIndex != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("data_rate_index")
		x.DataRateIndex.MarshalProtoJSON(s)
	}
	if x.CodingRate != "" {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("coding_rate")
		s.WriteString(x.CodingRate)
	}
	if x.Frequency != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("frequency")
		s.WriteUint64(x.Frequency)
	}
	if x.EnableCrc {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("enable_crc")
		s.WriteBool(x.EnableCrc)
	}
	if x.Timestamp != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("timestamp")
		s.WriteUint32(x.Timestamp)
	}
	if x.Time != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("time")
		s.WriteTime(*x.Time)
	}
	if x.Downlink != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("downlink")
		// NOTE: TxSettings_Downlink does not seem to implement MarshalProtoJSON.
		gogo.MarshalMessage(s, x.Downlink)
	}
	s.WriteObjectEnd()
}

// UnmarshalProtoJSON unmarshals the TxSettings message from JSON.
func (x *TxSettings) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "data_rate", "dataRate":
			// NOTE: DataRate does not seem to implement UnmarshalProtoJSON.
			var v DataRate
			gogo.UnmarshalMessage(s, &v)
			x.DataRate = v
		case "data_rate_index", "dataRateIndex":
			x.DataRateIndex.UnmarshalProtoJSON(s)
		case "coding_rate", "codingRate":
			x.CodingRate = s.ReadString()
		case "frequency":
			x.Frequency = s.ReadUint64()
		case "enable_crc", "enableCrc":
			x.EnableCrc = s.ReadBool()
		case "timestamp":
			x.Timestamp = s.ReadUint32()
		case "time":
			v := s.ReadTime()
			if s.Err() != nil {
				return
			}
			x.Time = v
		case "downlink":
			// NOTE: TxSettings_Downlink does not seem to implement UnmarshalProtoJSON.
			var v TxSettings_Downlink
			gogo.UnmarshalMessage(s, &v)
			x.Downlink = &v
		}
	})
}

// MarshalProtoJSON marshals the TxRequest message to JSON.
func (x *TxRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Class != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("class")
		x.Class.MarshalProtoJSON(s)
	}
	if len(x.DownlinkPaths) > 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("downlink_paths")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.DownlinkPaths {
			s.WriteMoreIf(&wroteElement)
			// NOTE: DownlinkPath does not seem to implement MarshalProtoJSON.
			gogo.MarshalMessage(s, element)
		}
		s.WriteArrayEnd()
	}
	if x.Rx1Delay != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("rx1_delay")
		x.Rx1Delay.MarshalProtoJSON(s)
	}
	if x.Rx1DataRateIndex != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("rx1_data_rate_index")
		x.Rx1DataRateIndex.MarshalProtoJSON(s)
	}
	if x.Rx1Frequency != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("rx1_frequency")
		s.WriteUint64(x.Rx1Frequency)
	}
	if x.Rx2DataRateIndex != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("rx2_data_rate_index")
		x.Rx2DataRateIndex.MarshalProtoJSON(s)
	}
	if x.Rx2Frequency != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("rx2_frequency")
		s.WriteUint64(x.Rx2Frequency)
	}
	if x.Priority != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("priority")
		x.Priority.MarshalProtoJSON(s)
	}
	if x.AbsoluteTime != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("absolute_time")
		s.WriteTime(*x.AbsoluteTime)
	}
	if x.FrequencyPlanId != "" {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("frequency_plan_id")
		s.WriteString(x.FrequencyPlanId)
	}
	if x.LorawanPhyVersion != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("lorawan_phy_version")
		x.LorawanPhyVersion.MarshalProtoJSON(s)
	}
	if x.Advanced != nil {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("advanced")
		gogo.MarshalStruct(s, x.Advanced)
	}
	s.WriteObjectEnd()
}

// UnmarshalProtoJSON unmarshals the TxRequest message from JSON.
func (x *TxRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "class":
			x.Class.UnmarshalProtoJSON(s)
		case "downlink_paths", "downlinkPaths":
			s.ReadArray(func() {
				// NOTE: DownlinkPath does not seem to implement UnmarshalProtoJSON.
				var v DownlinkPath
				gogo.UnmarshalMessage(s, &v)
				x.DownlinkPaths = append(x.DownlinkPaths, &v)
			})
		case "rx1_delay", "rx1Delay":
			x.Rx1Delay.UnmarshalProtoJSON(s)
		case "rx1_data_rate_index", "rx1DataRateIndex":
			x.Rx1DataRateIndex.UnmarshalProtoJSON(s)
		case "rx1_frequency", "rx1Frequency":
			x.Rx1Frequency = s.ReadUint64()
		case "rx2_data_rate_index", "rx2DataRateIndex":
			x.Rx2DataRateIndex.UnmarshalProtoJSON(s)
		case "rx2_frequency", "rx2Frequency":
			x.Rx2Frequency = s.ReadUint64()
		case "priority":
			x.Priority.UnmarshalProtoJSON(s)
		case "absolute_time", "absoluteTime":
			v := s.ReadTime()
			if s.Err() != nil {
				return
			}
			x.AbsoluteTime = v
		case "frequency_plan_id", "frequencyPlanId":
			x.FrequencyPlanId = s.ReadString()
		case "lorawan_phy_version", "lorawanPhyVersion":
			x.LorawanPhyVersion.UnmarshalProtoJSON(s)
		case "advanced":
			v := gogo.UnmarshalStruct(s)
			if s.Err() != nil {
				return
			}
			x.Advanced = v
		}
	})
}

// MarshalProtoJSON marshals the MACCommand_ResetInd message to JSON.
func (x *MACCommand_ResetInd) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.MinorVersion != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("minor_version")
		x.MinorVersion.MarshalProtoJSON(s)
	}
	s.WriteObjectEnd()
}

// UnmarshalProtoJSON unmarshals the MACCommand_ResetInd message from JSON.
func (x *MACCommand_ResetInd) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "minor_version", "minorVersion":
			x.MinorVersion.UnmarshalProtoJSON(s)
		}
	})
}

// MarshalProtoJSON marshals the MACCommand_ResetConf message to JSON.
func (x *MACCommand_ResetConf) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.MinorVersion != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("minor_version")
		x.MinorVersion.MarshalProtoJSON(s)
	}
	s.WriteObjectEnd()
}

// UnmarshalProtoJSON unmarshals the MACCommand_ResetConf message from JSON.
func (x *MACCommand_ResetConf) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "minor_version", "minorVersion":
			x.MinorVersion.UnmarshalProtoJSON(s)
		}
	})
}

// MarshalProtoJSON marshals the MACCommand_LinkADRReq message to JSON.
func (x *MACCommand_LinkADRReq) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.DataRateIndex != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("data_rate_index")
		x.DataRateIndex.MarshalProtoJSON(s)
	}
	if x.TxPowerIndex != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("tx_power_index")
		s.WriteUint32(x.TxPowerIndex)
	}
	if len(x.ChannelMask) > 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("channel_mask")
		s.WriteBoolArray(x.ChannelMask)
	}
	if x.ChannelMaskControl != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("channel_mask_control")
		s.WriteUint32(x.ChannelMaskControl)
	}
	if x.NbTrans != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("nb_trans")
		s.WriteUint32(x.NbTrans)
	}
	s.WriteObjectEnd()
}

// UnmarshalProtoJSON unmarshals the MACCommand_LinkADRReq message from JSON.
func (x *MACCommand_LinkADRReq) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "data_rate_index", "dataRateIndex":
			x.DataRateIndex.UnmarshalProtoJSON(s)
		case "tx_power_index", "txPowerIndex":
			x.TxPowerIndex = s.ReadUint32()
		case "channel_mask", "channelMask":
			x.ChannelMask = s.ReadBoolArray()
		case "channel_mask_control", "channelMaskControl":
			x.ChannelMaskControl = s.ReadUint32()
		case "nb_trans", "nbTrans":
			x.NbTrans = s.ReadUint32()
		}
	})
}

// MarshalProtoJSON marshals the MACCommand_DutyCycleReq message to JSON.
func (x *MACCommand_DutyCycleReq) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.MaxDutyCycle != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("max_duty_cycle")
		x.MaxDutyCycle.MarshalProtoJSON(s)
	}
	s.WriteObjectEnd()
}

// UnmarshalProtoJSON unmarshals the MACCommand_DutyCycleReq message from JSON.
func (x *MACCommand_DutyCycleReq) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "max_duty_cycle", "maxDutyCycle":
			x.MaxDutyCycle.UnmarshalProtoJSON(s)
		}
	})
}

// MarshalProtoJSON marshals the MACCommand_RxParamSetupReq message to JSON.
func (x *MACCommand_RxParamSetupReq) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Rx2DataRateIndex != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("rx2_data_rate_index")
		x.Rx2DataRateIndex.MarshalProtoJSON(s)
	}
	if x.Rx1DataRateOffset != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("rx1_data_rate_offset")
		x.Rx1DataRateOffset.MarshalProtoJSON(s)
	}
	if x.Rx2Frequency != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("rx2_frequency")
		s.WriteUint64(x.Rx2Frequency)
	}
	s.WriteObjectEnd()
}

// UnmarshalProtoJSON unmarshals the MACCommand_RxParamSetupReq message from JSON.
func (x *MACCommand_RxParamSetupReq) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "rx2_data_rate_index", "rx2DataRateIndex":
			x.Rx2DataRateIndex.UnmarshalProtoJSON(s)
		case "rx1_data_rate_offset", "rx1DataRateOffset":
			x.Rx1DataRateOffset.UnmarshalProtoJSON(s)
		case "rx2_frequency", "rx2Frequency":
			x.Rx2Frequency = s.ReadUint64()
		}
	})
}

// MarshalProtoJSON marshals the MACCommand_NewChannelReq message to JSON.
func (x *MACCommand_NewChannelReq) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.ChannelIndex != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("channel_index")
		s.WriteUint32(x.ChannelIndex)
	}
	if x.Frequency != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("frequency")
		s.WriteUint64(x.Frequency)
	}
	if x.MinDataRateIndex != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("min_data_rate_index")
		x.MinDataRateIndex.MarshalProtoJSON(s)
	}
	if x.MaxDataRateIndex != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("max_data_rate_index")
		x.MaxDataRateIndex.MarshalProtoJSON(s)
	}
	s.WriteObjectEnd()
}

// UnmarshalProtoJSON unmarshals the MACCommand_NewChannelReq message from JSON.
func (x *MACCommand_NewChannelReq) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "channel_index", "channelIndex":
			x.ChannelIndex = s.ReadUint32()
		case "frequency":
			x.Frequency = s.ReadUint64()
		case "min_data_rate_index", "minDataRateIndex":
			x.MinDataRateIndex.UnmarshalProtoJSON(s)
		case "max_data_rate_index", "maxDataRateIndex":
			x.MaxDataRateIndex.UnmarshalProtoJSON(s)
		}
	})
}

// MarshalProtoJSON marshals the MACCommand_RxTimingSetupReq message to JSON.
func (x *MACCommand_RxTimingSetupReq) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Delay != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("delay")
		x.Delay.MarshalProtoJSON(s)
	}
	s.WriteObjectEnd()
}

// UnmarshalProtoJSON unmarshals the MACCommand_RxTimingSetupReq message from JSON.
func (x *MACCommand_RxTimingSetupReq) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "delay":
			x.Delay.UnmarshalProtoJSON(s)
		}
	})
}

// MarshalProtoJSON marshals the MACCommand_TxParamSetupReq message to JSON.
func (x *MACCommand_TxParamSetupReq) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.MaxEirpIndex != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("max_eirp_index")
		x.MaxEirpIndex.MarshalProtoJSON(s)
	}
	if x.UplinkDwellTime {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("uplink_dwell_time")
		s.WriteBool(x.UplinkDwellTime)
	}
	if x.DownlinkDwellTime {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("downlink_dwell_time")
		s.WriteBool(x.DownlinkDwellTime)
	}
	s.WriteObjectEnd()
}

// UnmarshalProtoJSON unmarshals the MACCommand_TxParamSetupReq message from JSON.
func (x *MACCommand_TxParamSetupReq) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "max_eirp_index", "maxEirpIndex":
			x.MaxEirpIndex.UnmarshalProtoJSON(s)
		case "uplink_dwell_time", "uplinkDwellTime":
			x.UplinkDwellTime = s.ReadBool()
		case "downlink_dwell_time", "downlinkDwellTime":
			x.DownlinkDwellTime = s.ReadBool()
		}
	})
}

// MarshalProtoJSON marshals the MACCommand_RekeyInd message to JSON.
func (x *MACCommand_RekeyInd) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.MinorVersion != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("minor_version")
		x.MinorVersion.MarshalProtoJSON(s)
	}
	s.WriteObjectEnd()
}

// UnmarshalProtoJSON unmarshals the MACCommand_RekeyInd message from JSON.
func (x *MACCommand_RekeyInd) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "minor_version", "minorVersion":
			x.MinorVersion.UnmarshalProtoJSON(s)
		}
	})
}

// MarshalProtoJSON marshals the MACCommand_RekeyConf message to JSON.
func (x *MACCommand_RekeyConf) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.MinorVersion != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("minor_version")
		x.MinorVersion.MarshalProtoJSON(s)
	}
	s.WriteObjectEnd()
}

// UnmarshalProtoJSON unmarshals the MACCommand_RekeyConf message from JSON.
func (x *MACCommand_RekeyConf) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "minor_version", "minorVersion":
			x.MinorVersion.UnmarshalProtoJSON(s)
		}
	})
}

// MarshalProtoJSON marshals the MACCommand_ADRParamSetupReq message to JSON.
func (x *MACCommand_ADRParamSetupReq) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.AdrAckLimitExponent != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("adr_ack_limit_exponent")
		x.AdrAckLimitExponent.MarshalProtoJSON(s)
	}
	if x.AdrAckDelayExponent != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("adr_ack_delay_exponent")
		x.AdrAckDelayExponent.MarshalProtoJSON(s)
	}
	s.WriteObjectEnd()
}

// UnmarshalProtoJSON unmarshals the MACCommand_ADRParamSetupReq message from JSON.
func (x *MACCommand_ADRParamSetupReq) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "adr_ack_limit_exponent", "adrAckLimitExponent":
			x.AdrAckLimitExponent.UnmarshalProtoJSON(s)
		case "adr_ack_delay_exponent", "adrAckDelayExponent":
			x.AdrAckDelayExponent.UnmarshalProtoJSON(s)
		}
	})
}

// MarshalProtoJSON marshals the MACCommand_ForceRejoinReq message to JSON.
func (x *MACCommand_ForceRejoinReq) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.RejoinType != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("rejoin_type")
		x.RejoinType.MarshalProtoJSON(s)
	}
	if x.DataRateIndex != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("data_rate_index")
		x.DataRateIndex.MarshalProtoJSON(s)
	}
	if x.MaxRetries != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("max_retries")
		s.WriteUint32(x.MaxRetries)
	}
	if x.PeriodExponent != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("period_exponent")
		x.PeriodExponent.MarshalProtoJSON(s)
	}
	s.WriteObjectEnd()
}

// UnmarshalProtoJSON unmarshals the MACCommand_ForceRejoinReq message from JSON.
func (x *MACCommand_ForceRejoinReq) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "rejoin_type", "rejoinType":
			x.RejoinType.UnmarshalProtoJSON(s)
		case "data_rate_index", "dataRateIndex":
			x.DataRateIndex.UnmarshalProtoJSON(s)
		case "max_retries", "maxRetries":
			x.MaxRetries = s.ReadUint32()
		case "period_exponent", "periodExponent":
			x.PeriodExponent.UnmarshalProtoJSON(s)
		}
	})
}

// MarshalProtoJSON marshals the MACCommand_RejoinParamSetupReq message to JSON.
func (x *MACCommand_RejoinParamSetupReq) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.MaxCountExponent != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("max_count_exponent")
		x.MaxCountExponent.MarshalProtoJSON(s)
	}
	if x.MaxTimeExponent != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("max_time_exponent")
		x.MaxTimeExponent.MarshalProtoJSON(s)
	}
	s.WriteObjectEnd()
}

// UnmarshalProtoJSON unmarshals the MACCommand_RejoinParamSetupReq message from JSON.
func (x *MACCommand_RejoinParamSetupReq) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "max_count_exponent", "maxCountExponent":
			x.MaxCountExponent.UnmarshalProtoJSON(s)
		case "max_time_exponent", "maxTimeExponent":
			x.MaxTimeExponent.UnmarshalProtoJSON(s)
		}
	})
}

// MarshalProtoJSON marshals the MACCommand_PingSlotInfoReq message to JSON.
func (x *MACCommand_PingSlotInfoReq) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Period != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("period")
		x.Period.MarshalProtoJSON(s)
	}
	s.WriteObjectEnd()
}

// UnmarshalProtoJSON unmarshals the MACCommand_PingSlotInfoReq message from JSON.
func (x *MACCommand_PingSlotInfoReq) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "period":
			x.Period.UnmarshalProtoJSON(s)
		}
	})
}

// MarshalProtoJSON marshals the MACCommand_PingSlotChannelReq message to JSON.
func (x *MACCommand_PingSlotChannelReq) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Frequency != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("frequency")
		s.WriteUint64(x.Frequency)
	}
	if x.DataRateIndex != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("data_rate_index")
		x.DataRateIndex.MarshalProtoJSON(s)
	}
	s.WriteObjectEnd()
}

// UnmarshalProtoJSON unmarshals the MACCommand_PingSlotChannelReq message from JSON.
func (x *MACCommand_PingSlotChannelReq) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "frequency":
			x.Frequency = s.ReadUint64()
		case "data_rate_index", "dataRateIndex":
			x.DataRateIndex.UnmarshalProtoJSON(s)
		}
	})
}

// MarshalProtoJSON marshals the MACCommand_DeviceModeInd message to JSON.
func (x *MACCommand_DeviceModeInd) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Class != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("class")
		x.Class.MarshalProtoJSON(s)
	}
	s.WriteObjectEnd()
}

// UnmarshalProtoJSON unmarshals the MACCommand_DeviceModeInd message from JSON.
func (x *MACCommand_DeviceModeInd) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "class":
			x.Class.UnmarshalProtoJSON(s)
		}
	})
}

// MarshalProtoJSON marshals the MACCommand_DeviceModeConf message to JSON.
func (x *MACCommand_DeviceModeConf) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Class != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("class")
		x.Class.MarshalProtoJSON(s)
	}
	s.WriteObjectEnd()
}

// UnmarshalProtoJSON unmarshals the MACCommand_DeviceModeConf message from JSON.
func (x *MACCommand_DeviceModeConf) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "class":
			x.Class.UnmarshalProtoJSON(s)
		}
	})
}

// MarshalProtoJSON marshals the MACCommand message to JSON.
func (x *MACCommand) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Cid != 0 {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("cid")
		x.Cid.MarshalProtoJSON(s)
	}
	if x.Payload != nil {
		switch v := x.Payload.(type) {
		case *MACCommand_RawPayload:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("raw_payload")
			s.WriteBytes(v.RawPayload)
		case *MACCommand_ResetInd_:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("reset_ind")
			v.ResetInd.MarshalProtoJSON(s.WithField("reset_ind"))
		case *MACCommand_ResetConf_:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("reset_conf")
			v.ResetConf.MarshalProtoJSON(s.WithField("reset_conf"))
		case *MACCommand_LinkCheckAns_:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("link_check_ans")
			// NOTE: MACCommand_LinkCheckAns does not seem to implement MarshalProtoJSON.
			gogo.MarshalMessage(s, v.LinkCheckAns)
		case *MACCommand_LinkAdrReq:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("link_adr_req")
			v.LinkAdrReq.MarshalProtoJSON(s.WithField("link_adr_req"))
		case *MACCommand_LinkAdrAns:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("link_adr_ans")
			// NOTE: MACCommand_LinkADRAns does not seem to implement MarshalProtoJSON.
			gogo.MarshalMessage(s, v.LinkAdrAns)
		case *MACCommand_DutyCycleReq_:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("duty_cycle_req")
			v.DutyCycleReq.MarshalProtoJSON(s.WithField("duty_cycle_req"))
		case *MACCommand_RxParamSetupReq_:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("rx_param_setup_req")
			v.RxParamSetupReq.MarshalProtoJSON(s.WithField("rx_param_setup_req"))
		case *MACCommand_RxParamSetupAns_:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("rx_param_setup_ans")
			// NOTE: MACCommand_RxParamSetupAns does not seem to implement MarshalProtoJSON.
			gogo.MarshalMessage(s, v.RxParamSetupAns)
		case *MACCommand_DevStatusAns_:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("dev_status_ans")
			// NOTE: MACCommand_DevStatusAns does not seem to implement MarshalProtoJSON.
			gogo.MarshalMessage(s, v.DevStatusAns)
		case *MACCommand_NewChannelReq_:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("new_channel_req")
			v.NewChannelReq.MarshalProtoJSON(s.WithField("new_channel_req"))
		case *MACCommand_NewChannelAns_:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("new_channel_ans")
			// NOTE: MACCommand_NewChannelAns does not seem to implement MarshalProtoJSON.
			gogo.MarshalMessage(s, v.NewChannelAns)
		case *MACCommand_DlChannelReq:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("dl_channel_req")
			// NOTE: MACCommand_DLChannelReq does not seem to implement MarshalProtoJSON.
			gogo.MarshalMessage(s, v.DlChannelReq)
		case *MACCommand_DlChannelAns:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("dl_channel_ans")
			// NOTE: MACCommand_DLChannelAns does not seem to implement MarshalProtoJSON.
			gogo.MarshalMessage(s, v.DlChannelAns)
		case *MACCommand_RxTimingSetupReq_:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("rx_timing_setup_req")
			v.RxTimingSetupReq.MarshalProtoJSON(s.WithField("rx_timing_setup_req"))
		case *MACCommand_TxParamSetupReq_:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("tx_param_setup_req")
			v.TxParamSetupReq.MarshalProtoJSON(s.WithField("tx_param_setup_req"))
		case *MACCommand_RekeyInd_:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("rekey_ind")
			v.RekeyInd.MarshalProtoJSON(s.WithField("rekey_ind"))
		case *MACCommand_RekeyConf_:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("rekey_conf")
			v.RekeyConf.MarshalProtoJSON(s.WithField("rekey_conf"))
		case *MACCommand_AdrParamSetupReq:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("adr_param_setup_req")
			v.AdrParamSetupReq.MarshalProtoJSON(s.WithField("adr_param_setup_req"))
		case *MACCommand_DeviceTimeAns_:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("device_time_ans")
			// NOTE: MACCommand_DeviceTimeAns does not seem to implement MarshalProtoJSON.
			gogo.MarshalMessage(s, v.DeviceTimeAns)
		case *MACCommand_ForceRejoinReq_:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("force_rejoin_req")
			v.ForceRejoinReq.MarshalProtoJSON(s.WithField("force_rejoin_req"))
		case *MACCommand_RejoinParamSetupReq_:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("rejoin_param_setup_req")
			v.RejoinParamSetupReq.MarshalProtoJSON(s.WithField("rejoin_param_setup_req"))
		case *MACCommand_RejoinParamSetupAns_:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("rejoin_param_setup_ans")
			// NOTE: MACCommand_RejoinParamSetupAns does not seem to implement MarshalProtoJSON.
			gogo.MarshalMessage(s, v.RejoinParamSetupAns)
		case *MACCommand_PingSlotInfoReq_:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("ping_slot_info_req")
			v.PingSlotInfoReq.MarshalProtoJSON(s.WithField("ping_slot_info_req"))
		case *MACCommand_PingSlotChannelReq_:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("ping_slot_channel_req")
			v.PingSlotChannelReq.MarshalProtoJSON(s.WithField("ping_slot_channel_req"))
		case *MACCommand_PingSlotChannelAns_:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("ping_slot_channel_ans")
			// NOTE: MACCommand_PingSlotChannelAns does not seem to implement MarshalProtoJSON.
			gogo.MarshalMessage(s, v.PingSlotChannelAns)
		case *MACCommand_BeaconTimingAns_:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("beacon_timing_ans")
			// NOTE: MACCommand_BeaconTimingAns does not seem to implement MarshalProtoJSON.
			gogo.MarshalMessage(s, v.BeaconTimingAns)
		case *MACCommand_BeaconFreqReq_:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("beacon_freq_req")
			// NOTE: MACCommand_BeaconFreqReq does not seem to implement MarshalProtoJSON.
			gogo.MarshalMessage(s, v.BeaconFreqReq)
		case *MACCommand_BeaconFreqAns_:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("beacon_freq_ans")
			// NOTE: MACCommand_BeaconFreqAns does not seem to implement MarshalProtoJSON.
			gogo.MarshalMessage(s, v.BeaconFreqAns)
		case *MACCommand_DeviceModeInd_:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("device_mode_ind")
			v.DeviceModeInd.MarshalProtoJSON(s.WithField("device_mode_ind"))
		case *MACCommand_DeviceModeConf_:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("device_mode_conf")
			v.DeviceModeConf.MarshalProtoJSON(s.WithField("device_mode_conf"))
		}
	}
	s.WriteObjectEnd()
}

// UnmarshalProtoJSON unmarshals the MACCommand message from JSON.
func (x *MACCommand) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "cid":
			x.Cid.UnmarshalProtoJSON(s)
		case "raw_payload", "rawPayload":
			ov := &MACCommand_RawPayload{}
			ov.RawPayload = s.ReadBytes()
			x.Payload = ov
		case "reset_ind", "resetInd":
			ov := &MACCommand_ResetInd_{}
			if !s.ReadNil() {
				ov.ResetInd = &MACCommand_ResetInd{}
				ov.ResetInd.UnmarshalProtoJSON(s.WithField("reset_ind"))
			}
			x.Payload = ov
		case "reset_conf", "resetConf":
			ov := &MACCommand_ResetConf_{}
			if !s.ReadNil() {
				ov.ResetConf = &MACCommand_ResetConf{}
				ov.ResetConf.UnmarshalProtoJSON(s.WithField("reset_conf"))
			}
			x.Payload = ov
		case "link_check_ans", "linkCheckAns":
			ov := &MACCommand_LinkCheckAns_{}
			// NOTE: MACCommand_LinkCheckAns does not seem to implement UnmarshalProtoJSON.
			var v MACCommand_LinkCheckAns
			gogo.UnmarshalMessage(s, &v)
			ov.LinkCheckAns = &v
			x.Payload = ov
		case "link_adr_req", "linkAdrReq":
			ov := &MACCommand_LinkAdrReq{}
			if !s.ReadNil() {
				ov.LinkAdrReq = &MACCommand_LinkADRReq{}
				ov.LinkAdrReq.UnmarshalProtoJSON(s.WithField("link_adr_req"))
			}
			x.Payload = ov
		case "link_adr_ans", "linkAdrAns":
			ov := &MACCommand_LinkAdrAns{}
			// NOTE: MACCommand_LinkADRAns does not seem to implement UnmarshalProtoJSON.
			var v MACCommand_LinkADRAns
			gogo.UnmarshalMessage(s, &v)
			ov.LinkAdrAns = &v
			x.Payload = ov
		case "duty_cycle_req", "dutyCycleReq":
			ov := &MACCommand_DutyCycleReq_{}
			if !s.ReadNil() {
				ov.DutyCycleReq = &MACCommand_DutyCycleReq{}
				ov.DutyCycleReq.UnmarshalProtoJSON(s.WithField("duty_cycle_req"))
			}
			x.Payload = ov
		case "rx_param_setup_req", "rxParamSetupReq":
			ov := &MACCommand_RxParamSetupReq_{}
			if !s.ReadNil() {
				ov.RxParamSetupReq = &MACCommand_RxParamSetupReq{}
				ov.RxParamSetupReq.UnmarshalProtoJSON(s.WithField("rx_param_setup_req"))
			}
			x.Payload = ov
		case "rx_param_setup_ans", "rxParamSetupAns":
			ov := &MACCommand_RxParamSetupAns_{}
			// NOTE: MACCommand_RxParamSetupAns does not seem to implement UnmarshalProtoJSON.
			var v MACCommand_RxParamSetupAns
			gogo.UnmarshalMessage(s, &v)
			ov.RxParamSetupAns = &v
			x.Payload = ov
		case "dev_status_ans", "devStatusAns":
			ov := &MACCommand_DevStatusAns_{}
			// NOTE: MACCommand_DevStatusAns does not seem to implement UnmarshalProtoJSON.
			var v MACCommand_DevStatusAns
			gogo.UnmarshalMessage(s, &v)
			ov.DevStatusAns = &v
			x.Payload = ov
		case "new_channel_req", "newChannelReq":
			ov := &MACCommand_NewChannelReq_{}
			if !s.ReadNil() {
				ov.NewChannelReq = &MACCommand_NewChannelReq{}
				ov.NewChannelReq.UnmarshalProtoJSON(s.WithField("new_channel_req"))
			}
			x.Payload = ov
		case "new_channel_ans", "newChannelAns":
			ov := &MACCommand_NewChannelAns_{}
			// NOTE: MACCommand_NewChannelAns does not seem to implement UnmarshalProtoJSON.
			var v MACCommand_NewChannelAns
			gogo.UnmarshalMessage(s, &v)
			ov.NewChannelAns = &v
			x.Payload = ov
		case "dl_channel_req", "dlChannelReq":
			ov := &MACCommand_DlChannelReq{}
			// NOTE: MACCommand_DLChannelReq does not seem to implement UnmarshalProtoJSON.
			var v MACCommand_DLChannelReq
			gogo.UnmarshalMessage(s, &v)
			ov.DlChannelReq = &v
			x.Payload = ov
		case "dl_channel_ans", "dlChannelAns":
			ov := &MACCommand_DlChannelAns{}
			// NOTE: MACCommand_DLChannelAns does not seem to implement UnmarshalProtoJSON.
			var v MACCommand_DLChannelAns
			gogo.UnmarshalMessage(s, &v)
			ov.DlChannelAns = &v
			x.Payload = ov
		case "rx_timing_setup_req", "rxTimingSetupReq":
			ov := &MACCommand_RxTimingSetupReq_{}
			if !s.ReadNil() {
				ov.RxTimingSetupReq = &MACCommand_RxTimingSetupReq{}
				ov.RxTimingSetupReq.UnmarshalProtoJSON(s.WithField("rx_timing_setup_req"))
			}
			x.Payload = ov
		case "tx_param_setup_req", "txParamSetupReq":
			ov := &MACCommand_TxParamSetupReq_{}
			if !s.ReadNil() {
				ov.TxParamSetupReq = &MACCommand_TxParamSetupReq{}
				ov.TxParamSetupReq.UnmarshalProtoJSON(s.WithField("tx_param_setup_req"))
			}
			x.Payload = ov
		case "rekey_ind", "rekeyInd":
			ov := &MACCommand_RekeyInd_{}
			if !s.ReadNil() {
				ov.RekeyInd = &MACCommand_RekeyInd{}
				ov.RekeyInd.UnmarshalProtoJSON(s.WithField("rekey_ind"))
			}
			x.Payload = ov
		case "rekey_conf", "rekeyConf":
			ov := &MACCommand_RekeyConf_{}
			if !s.ReadNil() {
				ov.RekeyConf = &MACCommand_RekeyConf{}
				ov.RekeyConf.UnmarshalProtoJSON(s.WithField("rekey_conf"))
			}
			x.Payload = ov
		case "adr_param_setup_req", "adrParamSetupReq":
			ov := &MACCommand_AdrParamSetupReq{}
			if !s.ReadNil() {
				ov.AdrParamSetupReq = &MACCommand_ADRParamSetupReq{}
				ov.AdrParamSetupReq.UnmarshalProtoJSON(s.WithField("adr_param_setup_req"))
			}
			x.Payload = ov
		case "device_time_ans", "deviceTimeAns":
			ov := &MACCommand_DeviceTimeAns_{}
			// NOTE: MACCommand_DeviceTimeAns does not seem to implement UnmarshalProtoJSON.
			var v MACCommand_DeviceTimeAns
			gogo.UnmarshalMessage(s, &v)
			ov.DeviceTimeAns = &v
			x.Payload = ov
		case "force_rejoin_req", "forceRejoinReq":
			ov := &MACCommand_ForceRejoinReq_{}
			if !s.ReadNil() {
				ov.ForceRejoinReq = &MACCommand_ForceRejoinReq{}
				ov.ForceRejoinReq.UnmarshalProtoJSON(s.WithField("force_rejoin_req"))
			}
			x.Payload = ov
		case "rejoin_param_setup_req", "rejoinParamSetupReq":
			ov := &MACCommand_RejoinParamSetupReq_{}
			if !s.ReadNil() {
				ov.RejoinParamSetupReq = &MACCommand_RejoinParamSetupReq{}
				ov.RejoinParamSetupReq.UnmarshalProtoJSON(s.WithField("rejoin_param_setup_req"))
			}
			x.Payload = ov
		case "rejoin_param_setup_ans", "rejoinParamSetupAns":
			ov := &MACCommand_RejoinParamSetupAns_{}
			// NOTE: MACCommand_RejoinParamSetupAns does not seem to implement UnmarshalProtoJSON.
			var v MACCommand_RejoinParamSetupAns
			gogo.UnmarshalMessage(s, &v)
			ov.RejoinParamSetupAns = &v
			x.Payload = ov
		case "ping_slot_info_req", "pingSlotInfoReq":
			ov := &MACCommand_PingSlotInfoReq_{}
			if !s.ReadNil() {
				ov.PingSlotInfoReq = &MACCommand_PingSlotInfoReq{}
				ov.PingSlotInfoReq.UnmarshalProtoJSON(s.WithField("ping_slot_info_req"))
			}
			x.Payload = ov
		case "ping_slot_channel_req", "pingSlotChannelReq":
			ov := &MACCommand_PingSlotChannelReq_{}
			if !s.ReadNil() {
				ov.PingSlotChannelReq = &MACCommand_PingSlotChannelReq{}
				ov.PingSlotChannelReq.UnmarshalProtoJSON(s.WithField("ping_slot_channel_req"))
			}
			x.Payload = ov
		case "ping_slot_channel_ans", "pingSlotChannelAns":
			ov := &MACCommand_PingSlotChannelAns_{}
			// NOTE: MACCommand_PingSlotChannelAns does not seem to implement UnmarshalProtoJSON.
			var v MACCommand_PingSlotChannelAns
			gogo.UnmarshalMessage(s, &v)
			ov.PingSlotChannelAns = &v
			x.Payload = ov
		case "beacon_timing_ans", "beaconTimingAns":
			ov := &MACCommand_BeaconTimingAns_{}
			// NOTE: MACCommand_BeaconTimingAns does not seem to implement UnmarshalProtoJSON.
			var v MACCommand_BeaconTimingAns
			gogo.UnmarshalMessage(s, &v)
			ov.BeaconTimingAns = &v
			x.Payload = ov
		case "beacon_freq_req", "beaconFreqReq":
			ov := &MACCommand_BeaconFreqReq_{}
			// NOTE: MACCommand_BeaconFreqReq does not seem to implement UnmarshalProtoJSON.
			var v MACCommand_BeaconFreqReq
			gogo.UnmarshalMessage(s, &v)
			ov.BeaconFreqReq = &v
			x.Payload = ov
		case "beacon_freq_ans", "beaconFreqAns":
			ov := &MACCommand_BeaconFreqAns_{}
			// NOTE: MACCommand_BeaconFreqAns does not seem to implement UnmarshalProtoJSON.
			var v MACCommand_BeaconFreqAns
			gogo.UnmarshalMessage(s, &v)
			ov.BeaconFreqAns = &v
			x.Payload = ov
		case "device_mode_ind", "deviceModeInd":
			ov := &MACCommand_DeviceModeInd_{}
			if !s.ReadNil() {
				ov.DeviceModeInd = &MACCommand_DeviceModeInd{}
				ov.DeviceModeInd.UnmarshalProtoJSON(s.WithField("device_mode_ind"))
			}
			x.Payload = ov
		case "device_mode_conf", "deviceModeConf":
			ov := &MACCommand_DeviceModeConf_{}
			if !s.ReadNil() {
				ov.DeviceModeConf = &MACCommand_DeviceModeConf{}
				ov.DeviceModeConf.UnmarshalProtoJSON(s.WithField("device_mode_conf"))
			}
			x.Payload = ov
		}
	})
}

// MarshalProtoJSON marshals the FrequencyValue message to JSON.
func (x *FrequencyValue) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteUint64(x.Value)
	return
}

// UnmarshalProtoJSON unmarshals the FrequencyValue message from JSON.
func (x *FrequencyValue) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	x.Value = s.ReadUint64()
	return
}

// MarshalProtoJSON marshals the DataRateOffsetValue message to JSON.
func (x *DataRateOffsetValue) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	x.Value.MarshalProtoJSON(s)
	return
}

// UnmarshalProtoJSON unmarshals the DataRateOffsetValue message from JSON.
func (x *DataRateOffsetValue) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	x.Value.UnmarshalProtoJSON(s)
	return
}

// MarshalProtoJSON marshals the DataRateIndexValue message to JSON.
func (x *DataRateIndexValue) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	x.Value.MarshalProtoJSON(s)
	return
}

// UnmarshalProtoJSON unmarshals the DataRateIndexValue message from JSON.
func (x *DataRateIndexValue) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	x.Value.UnmarshalProtoJSON(s)
	return
}

// MarshalProtoJSON marshals the PingSlotPeriodValue message to JSON.
func (x *PingSlotPeriodValue) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	x.Value.MarshalProtoJSON(s)
	return
}

// UnmarshalProtoJSON unmarshals the PingSlotPeriodValue message from JSON.
func (x *PingSlotPeriodValue) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	x.Value.UnmarshalProtoJSON(s)
	return
}

// MarshalProtoJSON marshals the AggregatedDutyCycleValue message to JSON.
func (x *AggregatedDutyCycleValue) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	x.Value.MarshalProtoJSON(s)
	return
}

// UnmarshalProtoJSON unmarshals the AggregatedDutyCycleValue message from JSON.
func (x *AggregatedDutyCycleValue) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	x.Value.UnmarshalProtoJSON(s)
	return
}

// MarshalProtoJSON marshals the RxDelayValue message to JSON.
func (x *RxDelayValue) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	x.Value.MarshalProtoJSON(s)
	return
}

// UnmarshalProtoJSON unmarshals the RxDelayValue message from JSON.
func (x *RxDelayValue) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	x.Value.UnmarshalProtoJSON(s)
	return
}

// MarshalProtoJSON marshals the ADRAckLimitExponentValue message to JSON.
func (x *ADRAckLimitExponentValue) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	x.Value.MarshalProtoJSON(s)
	return
}

// UnmarshalProtoJSON unmarshals the ADRAckLimitExponentValue message from JSON.
func (x *ADRAckLimitExponentValue) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	x.Value.UnmarshalProtoJSON(s)
	return
}

// MarshalProtoJSON marshals the ADRAckDelayExponentValue message to JSON.
func (x *ADRAckDelayExponentValue) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	x.Value.MarshalProtoJSON(s)
	return
}

// UnmarshalProtoJSON unmarshals the ADRAckDelayExponentValue message from JSON.
func (x *ADRAckDelayExponentValue) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	x.Value.UnmarshalProtoJSON(s)
	return
}

// MarshalProtoJSON marshals the DeviceEIRPValue message to JSON.
func (x *DeviceEIRPValue) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	x.Value.MarshalProtoJSON(s)
	return
}

// UnmarshalProtoJSON unmarshals the DeviceEIRPValue message from JSON.
func (x *DeviceEIRPValue) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	x.Value.UnmarshalProtoJSON(s)
	return
}
